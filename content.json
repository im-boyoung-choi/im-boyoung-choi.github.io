{"pages":[],"posts":[{"title":"왕초보를 위한 GitHub Blog 만들기 (with. hexo icarus)","text":"개발 공부를 시작하기 전에 기록을 정리하기 위해 블로그를 개설했다. 네이버, 티스토리, 벨로그, 브런치, 미디엄 등 요즘 개발자들에게 인기 있는 블로그 플랫폼들을 다 살펴봤지만 개발 공부하는데 좀 더 도움이 되는 건 없을까 찾던 중 GitHub 블로그를 선택하게 됐다. 구글에 ‘GitHub 블로그 만들기’를 검색하면 수많은 글이 나오지만, 진짜 나 같은 왕왕-왕초보를 위해 처음부터 끝까지 단 하나만 보고 뚝딱 만들어 낼 수 있게 작성된 포스트는 찾을 수 없었다. 에러 없이 개설하기까지 Git repository를 6번 삭제하고 다시 생성했다. 이 글은 node고 script고 개발의 기본 지식도 잘 모르는 나 같은 왕왕-왕초보를 위한 GitHub 블로그 개설 방법 안내이다. 1. GitHub 회원가입하기GitHub 블로그는 사용자의 username을 활용하여 URL이 생성된다. GirHub 공식문서에 따르면 블로그를 만들 때 사용되는 URL 형식을 [username].github.io로 정확히 일치하게 입력하지 않으면 작동하지 않을 수 있으므로 올바르게 설정해야 한다고 안내되어 있다. 나도 기존에 사용하던 GitHub 계정이 있었지만 이참에 대외적으로 사용할 수 있는 새 계정을 만들어야겠다 싶어 새로 계정을 만들었다. 계정을 만든 뒤에도 username을 변경할 수는 있지만 repository를 꽤 만들어서 활용하던 상태에서 username을 변경하면 기존에 공유했던 URL들이 다 무효화되기 때문에 개설할 때 신중하게 만드는 게 좋겠다. ** 나는 git이 이미 PC에 설치가 되어 있었는데, 혹시 설치되어 있지 않다면 다운로드받아야 한다. 2. repository 만들기 계정을 만들었으면 블로그 관리에 사용할 repository를 만든다. (초록색 ‘new’ 버튼 클릭) 위에서 언급했듯이 username을 정확히 일치시키지 않으면 작동하지 않을 수 있기 때문에 repository name을 적을 때 [username(=owner)].github.io로 제대로 입력했는지 꼭 확인한다. repository name 입력 후 ‘Cteate repository’를 눌러 생성을 완료한다. 3. 서버에 프로젝트 repository 내려받기git clone을 통해 방금 생성한 repository를 서버에 내려받아야 한다. 윈도우는 명령 프롬프터, MAC은 터미널을 열어 repository를 다운받을 서버(컴퓨터 폴더) 위치로 이동한다. 디렉토리 이동 명령어(cd) 사용법$ cd .. //해당 경로에서 상위 디렉토리로 이동$ cd [폴더명] //해당 경로에서 지정한 폴더로 이동$ [드라이브명]: //해당 드라이브로 이동$ cd 폴더를 터미널로 드래그 //이동 경로가 복잡한 폴더로 한 번에 이동 생성한 repository 화면 우측에 초록색 ‘code’ 버튼을 누르면 HTTPS 정보가 나온다. 이를 복사하여 clone repository를 진행한다. $ git clone https://github.com/im-boyoung-choi/im-boyoung-choi.github.io.git //본인 repository URLCloning into 'im-boyoung-choi.github.io'...warning: You appear to have cloned an empty repository. 여기서 나오는 warning은 무시하면 된다. 내려받은 repository로 터미널 디렉토리 경로를 다시 이동해준다. $ cd im-boyoung-choi.github.io.git 4. node 설치하기(with.hexo)GitHub 블로그를 검색해보면 Hexo와 Jekyll이라는 키워드를 많이 볼 수 있다. Hexo, Jekyll은 Static Site Generator(정적 웹사이트 생성기)인데, Jamstack에 들어가면 모든 Static Site Generator를 한눈에 볼 수 있다. 그중에서 사람들이 제일 많이 사용하는 것이 Jekyll, Hexo, Hugo(인기순)이다. 나는 한글 레퍼런스를 쉽게 찾을 수 있는지가 중요한 선택 기준 중 하나이기 때문에, 한국에서도 사용자가 많아 한글 레퍼런스를 비교적 쉽게 찾을 수 있는 Jekyll, Hexo로 선택지를 추렸다. 둘의 가장 큰 차이점은 Jekyll은 ruby 기반, Hexo는 javascript(node.js) 기반이라는 것인데, 나는 ruby에 대해서 잘 모르기도 하고 Jekyll은 빌드 속도가 느리다는 후기가 있어서 Hexo 블로그를 선택했다. 앞서 말했듯이, Hexo는 node.js 기반이기 때문에 node와 npm이 설치되어 있어야 한다. 아래 명령어로 node와 npm이 설치되어 있는지 확인해보자. $ node -vv14.15.4$ npm -v6.14.10 node 버전 확인이 안 된다면, node 공식 홈페이지에 가서 다운로드받으면 된다. npm은 ‘node package manager’이기 때문에 node를 설치하면 자동으로 같이 설치된다. 설치가 끝났다면 버전 확인 명령어를 통해 제대로 설치가 되었는지 확인한다. 5. hexo 설치하고 블로그 개설하기이제 hexo를 설치하면 된다. hexo 설치는 hexo 공식 문서를 확인하면 어렵지 않게 성공할 수 있다. hexo 문서에도 보면 hexo 설치를 시작하기 전에 git과 node를 설치하라는 안내가 있다. 우리는 이미 설치를 완료했기 때문에 바로 hexo 설치로 넘어간다. $ npm install -g hexo-cli 설치가 완료되면 타겟 폴더를 만들고 hexo를 초기화시켜줘야 한다. 방법은 아래와 같다. $ hexo init blog //hexo 버전 관리용 blog 폴더 생성$ cd blog //디렉토리 경로 변경$ npm install$ npm install hexo-server --save //hexo server 실행을 위한 플러그인$ npm install hexo-deployer-git --save //편리한 git 배포를 위한 플러그인 여기까지 마쳤으면 blog 폴더 내에 생성된 _config.yml 파일을 수정해보자. _config.yml 파일은 블로그의 기본 환경설정을 할 수 있는 정보들이 담겨있다. 5-1. 블로그 사이트 정보블로그 기본 정보들을 설정할 수 있다. # Sitetitle: nice to meet you :)subtitle: ''description: ''keywords:author: boyoung-choilanguage: kotimezone: '' 5-2. 블로그 URL 정보블로그 URL 정보를 설정할 수 있다. root 설정이 없는 경우 다음과 같이 추가해주면 된다. # URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'url: https://im-boyoung-choi.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks 5-3. GitHub 정보배포를 위해 본인의 GitHub 정보를 추가한다. 처음 생성한 본인의 GitHub 블로그 repository URL을 추가하면 된다. # Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: https://github.com/im-boyoung-choi/im-boyoung-choi.github.io.git branch: master 여기까지 마쳤으면 배포하기 전 로컬에 서버를 띄워 확인해보자. $ hexo generate //hexo 정적 리소스 생성, GitHub에 올라갈 리소스만 정리$ hexo server 변경 사항이 적용이 잘 안 된다면 다음 명령어를 사용한 뒤 위 과정을 한 번 더 시도해보자. $ hexo clean //캐시 파일(db.json) 및 생성된 파일(/public) 삭제 이후 로컬에서 확인이 완료되면 배포를 진행해준다. $ hexo deploy 본인의 GitHub 블로그 URL로 이동하면 배포가 된 것을 확인할 수 있다. 6. 테마 적용하기(with. icarus)이제는 테마를 적용하면 된다. 처음에 repository를 6번 삭제하고 다시 생성했다고 했는데, 바로 테마 적용이 문제였다. 적용이 안 되거나, 화면이 안 보이거나 각종 에러가 발생했는데 불행히 해결 방법을 찾지 못해 앞선 과정의 방법을 계속해서 바꿔 본 결과 현재 과정을 통해 테마 적용에 성공했다. hexo 테마는 종류가 많지만 나는 디테일한 부분은 어차피 커스텀 할 예정이라 큰 레이아웃 정도만 훑어보고 테마를 결정했다. 사람들이 많이 사용하는 테마는 icarus 외에 clean blog, next, tranquilpeak 정도가 있는 듯 하다. hexo v5부터는 npm 명령어로 테마 설치가 가능하다고 하는데(실제 icarus 공식 문서에서도 npm install로 설치하는 방법을 안내하고 있다.) 에러의 산을 넘지 못해 나는 scbmodule을 추가하는 방법으로 설치를 진행했다. $ git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus submodule add를 진행하면 themes 폴더 하위에 icarus 폴더가 생성된다. 5번 단계에서 수정했던 _config.yml 파일을 다시 열어 테마를 수정해주자. # Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus 이후 hexo server 명령어로 서버를 띄우면 에러가 발생한다. INFO Validating configINFO ======================================= ██╗ ██████╗ █████╗ ██████╗ ██╗ ██╗███████╗ ██║██╔════╝██╔══██╗██╔══██╗██║ ██║██╔════╝ ██║██║ ███████║██████╔╝██║ ██║███████╗ ██║██║ ██╔══██║██╔══██╗██║ ██║╚════██║ ██║╚██████╗██║ ██║██║ ██║╚██████╔╝███████║ ╚═╝ ╚═════╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚══════╝=============================================INFO === Checking package dependencies ===ERROR Package bulma-stylus is not installed.ERROR Package hexo-renderer-inferno is not installed.ERROR Package hexo-component-inferno is not installed.ERROR Package inferno is not installed.ERROR Package inferno-create-element is not installed.ERROR Please install the missing dependencies your Hexo site root directory:ERROR npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.12.0 inferno@^7.3.3 inferno-create-element@^7.3.3ERROR or:ERROR yarn add bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.12.0 inferno@^7.3.3 inferno-create-element@^7.3.3 에러 안내를 보면 추가 설치가 필요한 것들이 안내되는데 그대로 복사해서 터미널에 입력해주면 된다. $ npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.12.0 inferno@^7.3.3 inferno-create-element@^7.3.3 완료 후 다시 hexo server 명령어로 서버를 띄우면 적용된 테마를 확인할 수 있다. 7. 배포하기테마 적용 후에는 hexo clean 을 한 뒤 최종 배포를 진행한다. $ hexo clean$ hexo deploy --generate //generate와 deploy를 한 번에 배포 후 본인의 블로그 URL로 이동하면 반영된 것을 확인할 수 있다. hexo-deployer-git을 설치해서 hexo deploy를 통해 손쉽게 바로 배포할 수 있지만 다른 PC 환경에서도 설정을 변경해야 하는 상황이 생길 수도 있으므로 git push도 해주도록 하자. $ git add .$ git commit -m '커밋메세지'$ git push 그럼 이제 언제 어디서나 새로 clone 받아서 이어 나갈 수 있는 GitHub 블로그가 완성됐다.","link":"/2021/07/01/2107-post01/"},{"title":"GitHub Blog 환경설정, 1탄","text":"블로그 배포가 끝났으면 이제 내 마음대로, 내 스타일대로 블로그를 개조할 시간이다. 내가 GitHub 블로그를 선택한 이유 중 하나가 바로 원하는 부분을 비교적 쉽고 자유롭게 커스텀 할 수 있다는 점이 마음에 들었기 때문이다. 이 환경설정 시리즈에서는 우리가 생각하는 본격 커스텀을 시작하기 전에 기본 세팅 수정을 통해 틀을 잡는 방법에 대해 이야기해볼 것이다. icarus 릴리즈노트를 보면 2020년 4월쯤 버전이 3.0대로 올라가면서 레이아웃이 JSX와 Inferno.js로 변경됐음을 알 수 있다. 그래서인지 블로그를 검색해봐도 나와 맞는 설정 방법은 찾기 힘들었다. 그래도 여차저차 원하는 형태로 기본 세팅에 성공했으니 그 방법을 공유한다. GitBlog를 만들면서 우리는 _config.yml 파일을 수정했다. _config.yml 파일이 블로그 전체의 환경설정 파일이라면, _config.icarus.yml 파일은 테마의 환경설정 파일이다. 내가 수정한 부분을 토대로 _config.icarus.yml 파일을 같이 살펴보자. 1. 로고 이미지 변경하기블로그 첫 화면을 열면 상단 header 부분에 icarus 로고가 제일 눈에 띈다. 이 로고 이미지를 변경할 수 있는 부분이 아래 코드이다. _config.icarus.yml# Path or URL to the website's logologo: /img/logo.svg 이미지 저장 경로는 /icarus/source/img이다. 여기서 이미지를 변경해 줘도 되지만 나는 깔끔한 디자인을 위해 과감하게 로고 영역을 삭제했다. (사실 블로그를 위해 로고를 만드는 과정이 번거롭기도 하고, 오래도록 마음에 드는 로고를 만들 자신이 없었다.) 로고를 삭제하고 싶으면 navbar.jsx 파일에서 아래 코드를 삭제(또는 주석 처리) 해주면 된다. blog/themes/icarus/common/navbar.jsx&lt;div class=&quot;navbar-brand justify-content-center&quot;&gt; &lt;a class=&quot;navbar-item navbar-logo&quot; href={siteUrl}&gt; {navbarLogo} &lt;/a&gt;&lt;/div&gt; 2. favicon 이미지 변경하기로고를 삭제했으니 favicon 이미지도 변경해보자. 다른 블로그를 보면 로고도 만들고, 로고 이미지를 활용하여 favicon 이미지도 제작했다. 하지만 나는 로고 이미지를 삭제했기 때문에 로고와는 별개로 favicon을 정해야 했다. 후에 블로그 전체 테마 색상을 보라색으로 변경할 예정이라 이모지 사이트에서 보라색 하트 아이콘 .png를 다운받아 .ico로 변환한 뒤, 아래와 같이 코드를 수정했다. 마찬가지로 이미지 경로는 /icarus/source/img 이다. _config.icarus.yml# Page metadata configurationshead: # URL or path to the website's icon favicon: /img/purple-heart.ico 3. navibar menu 수정하기블로그 테마를 적용했을 때 기본적으로 생성되는 메뉴는 Home, Archives, Categories, Tags, About이다. Home을 제외한 나머지 메뉴들의 필요성을 느끼지 못했지만 좀 더 사용해보고 결정하기 위해 우선 유지를 하고 싶었다. 메뉴의 쓰임을 살펴보려고 하나씩 눌러보니 이상하게 About 페이지만 연결이 안 됐다. 검색을 해봤지만 해결 방법을 찾지 못해 About 메뉴만 삭제하는 것을 선택했다. 아래 코드에서 navibar menu를 추가 또는 삭제할 수 있다. _config.icarus.yml# Page top navigation bar configurationsnavbar: # Navigation menu items menu: Home: / Archives: /archives Categories: /categories Tags: /tags navibar menu 오른쪽 영역을 보면 GitHub 아이콘과 검색 아이콘이 있다. 아래 코드에서 GitHub 연결 링크를 수정할 수 있다. _config.icarus.yml# Links to be shown on the right of the navigation bar links: Download on GitHub: icon: fab fa-github url: 'https://github.com/im-boyoung-choi' 4. footer link 수정하기navibar에 있는 GitHub 링크를 수정했으면 footer에 있는 링크도 수정해보자. 아래 코드에서 footer 오른쪽 영역에 위치한 저작권 안내 및 GitHub 연결 링크를 변경할 수 있다. 나는 저작권 안내 링크는 그대로 두고 GitHub 링크만 변경했다. _config.icarus.yml# Page footer configurationsfooter: # Links to be shown on the right of the footer section links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution 4.0 International: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Download on GitHub: icon: fab fa-github url: 'https://github.com/im-boyoung-choi' 대략적인 navibar, footer 환경설정은 끝났다. article, widjet 환경설정을 이어 붙여 설명하려고 했는데 후반부가 너무 길어 환경설정을 1탄 / 2탄 / 3탄으로 구분했다. 2탄에서는 article, 3탄에서는 widjet 환경설정에 대해 살펴볼 예정이다.","link":"/2021/07/02/2107-post02/"},{"title":"GitHub Blog 환경설정, 2탄","text":"1탄에서는 navibar, footer 환경설정을 대략적으로 정리했다. 2탄에서는 article 환경설정에 대해 살펴볼 예정이다. 시작하기 전에 1탄을 건너띄고 2탄을 열었다면, 뒤로 가서 1탄을 보고 올 것을 추천한다. 물론 처음 블로그 만드는 방법을 포스팅했을 때 언급한 것처럼, 이 글도 왕왕-왕초보를 위한 또는 하나부터 열까지 내가 다 설정하고 확인하고 싶은 사람들을 위한 글이기 때문에 ‘나는 이미 좀 고수다’하는 사람들은 필요한 부분을 알아서 읽어도 된다. navibar, footer 환경설정은 블로그를 전반적으로 정리하는 느낌이었다면, article 환경설정은 내 글의 첫인상을 어떻게 보이도록 할지 고민하는 과정 같았다. 그럼 이제 article 환경설정을 시작해보자. 5. article 환경설정 수정하기이제 article, widget 환경설정을 수정할 차례이다. 5-1. highlight 테마 변경하기먼저, 코드 블록에서 사용되는 highlight 테마를 변경해보자. icarus에서 지원하는 hightlight 테마 데모는 여기서 확인할 수 있다. 나는 VS code에서도 사용 중인 atom-one-dark 테마를 적용했다. clipboard는 손쉬운 복사를 제공할 것인지, fold는 코드 블록 접기 기능을 제공할 것인지를 설정할 수 있다. _config.icarus.yml# Article related configurationsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-dark # Show copy code button clipboard: true # Default folding status of the code blocks. Can be &quot;&quot;, &quot;folded&quot;, &quot;unfolded&quot; fold: &quot;&quot; 우리가 이전에 _config.yml 파일을 수정할 때 미처 적용하지 못했던 변경사항이 있다. 아래 코드를 참고하여 _config.yml 파일도 수정하자. 아래 수정사항은 hexo 공식 문서에 안내되어 있는 설정값이다. 나는 highlight 테마를 변경한 뒤 다른 환경설정을 진행하고 있을 때, 로컬 서버에서 테마 적용에 자꾸 오류가 나는 모습을 확인했다. 검색해봐도 마땅한 해결방법을 찾지 못했는데, hexo clean hexo generate을 진행 후 다시 서버를 열어보니 적용이 됐다. 혹시 적용되지 않아서 머리가 아프다면 hexo generate을 진행해보자. _config.yml# Article related configurationshighlight: enable: true line_number: false auto_detect: true tab_replace: '' wrap: true hljs: falseprismjs: enable: false preprocess: true line_number: true tab_replace: '' 5-2. article 관련 상세 정보 노출 여부 변경하기게시글 상단에 보면 언제, 누가 올렸고 이 글을 읽기 위해 얼마의 시간이 소모될 예정이며, 몇 명이 읽었는지 등 다양한 정보들을 볼 수 있다. 나는 이 정보가 불필요하다고 생각되어 상당 부분을 숨김 처리했다. 아래는 그중에서 읽는데 소모되는 시간을 알려주는 readtime을 설정하는 코드이다. _config.icarus.yml# Whether to show estimated article reading time readtime: false 이 외에는 _config.icarus.yml 파일이 아닌 article.jsx 파일에서 삭제 또는 주석 처리를 통해 숨길 수 있다. blog/themes/icarus/common/article.jsx 파일 약 42 line Metadata 하위의 코드를 보면 Creation Date, Last Update Date, author, Categories, Read time, Visitor counter 관련 코드가 있는 것을 확인할 수 있다. 나는 환경설정에서 false 값으로 숨김 처리한 Read time을 제외하고 Last Update Date, author 영역의 코드를 추가로 주석 처리했다. 6. 검색, 답변, 기부, 공유 설정하기이제 큰 부분이 끝났다,라고 생각했는데 작은 것들이 오히려 손이 더 많이 간다. 아래 과정에서 이제 외부 연결이 필요한 항목들을 설정해보자. 6-1. 검색 기능 설정하기우선 검색이다. hexo icarus에서 지원하는 검색 플러그인은 Algolia, Baidu, Google CSE, Insight 4가지가 있다. Insight를 제외한 설정값은 검색 시 해당 플랫폼에서 검색 결과를 찾아오기 때문에 나는 블로그 검색답게 Insight 기본값을 그대로 사용했다. _config.icarus.yml# Search plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Search/search: type: insight 6-2. 댓글 기능 설정하기글 상세 페이지로 이동하면 알 수 없는 붉은색 상자들이 덕지덕지 붙어있을 것이다. 그중 하나가 댓글 기능이다. 블로그 하면 댓글 기능을 또 빼놓을 수 없다. 댓글 플러그인은 Changyan, Disqus, Facebook, Gitalk, Utterance, Valine 등 총 10가지나 있는데 나는 역시 기본값인 Disqus를 선택했다. 추후 Utterance으로 변경할 예정이나, 지금은 기본적으로 사용되는 것들의 설정 방법을 아는 것이 먼저라고 생각했다. _config.icarus.yml# Comment plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/comment: type: disqus # Disqus shortname shortname: 'im-boyoung-choi-blog' shortname의 값은 disqus 사이트에서 확인할 수 있다. 자세한 과정은 내가 참고했던 블로그를 따라 해보기를 추천한다. 6-3. 기부 기능 설정하기붉은색 알 수 없는 상자들 중에 하나는 기부 기능이다. 각종 방법을 통해 방문자들에게 기부(라고 표현하는 것이 맞는지는 모르겠지만)를 받을 수 있는데, 아직은 별로 필요 없는 기능이라 생각되어 전체 주석 처리 했다. 아래 코드에서 설정값을 변경하거나 나처럼 주석 처리로 기능을 없앨 수 있다. _config.icarus.yml# Donate plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donation/donates: # &quot;Afdian.net&quot; donate button configurations - type: afdian # URL to the &quot;Afdian.net&quot; personal page url: '' # Alipay donate button configurations - type: alipay # Alipay qrcode image URL qrcode: '' # &quot;Buy me a coffee&quot; donate button configurations - type: buymeacoffee # URL to the &quot;Buy me a coffee&quot; page url: '' # Patreon donate button configurations - type: patreon # URL to the Patreon page url: '' # Paypal donate button configurations - type: paypal # Paypal business ID or email address business: '' # Currency code currency_code: USD # Wechat donate button configurations - type: wechat # Wechat qrcode image URL qrcode: '' 6-4. 공유 기능 설정하기붉은색 상자 중 또 하나는 공유 기능이다. 공유 플러그인은 AddThis, AddToAny, Baidu Share, Share.js, ShareThis가 있는데 나는 많이들 사용하는 ShareThis를 선택했다. _config.icarus.yml# Share plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/share: type: sharethis # URL to the ShareThis share plugin script install_url: 'https://platform-api.sharethis.com/js/sharethis.js#property=60dc2a2ac3a073001ac7a28a&amp;product=inline-share-buttons' install_url 값은 sharethis 사이트에서 확인할 수 있다. 접속 후 메인에 있는 ‘Start with Share Buttons’를 누른다. 나는 가장 많이 사용하는 가로 노출 버튼을 선택했다. 세부 버튼 스타일을 내가 원하는 대로 선택한 뒤 ‘next’ 버튼을 누른다. 로그인 화면이 나오면 회원가입 또는 로그인을 진행해 준다. 로그인을 하면 코드가 나오는데, 우리는 이미 플러그인이 설치되어 있기 때문에 코드 전체를 복사하는 것이 아닌 src만 복사한다. 방금 복사한 src가 우리의 install_url이 된다. article 환경설정은 이렇게 마무리했다. 다음 widjet 환경설정에서는 widjet뿐만 아니라 Google AdSense, Google Analytics 연동 방법도 함께 다룰 예정이다.","link":"/2021/07/05/2107-post03/"},{"title":"GitHub Blog 환경설정, 3탄","text":"navibar, footer 환경설정은 1탄에서, article 환경설정은 2탄에서 대략적으로 정리했다. 3탄에서는 widjet 환경설정에 대해 살펴볼 예정이다. 1탄, 2탄을 안 보고 3탄을 열었다면 앞선 시리즈를 보고 올 것을 추천한다. 3개의 글을 구분하지 않고 한 번에 올려도 됐겠지만, 내가 처음 그랬듯이 너무 길게 설명되어 있는 포스트들을 보면 ‘내가 할 수 있을까’하는 걱정부터 앞섰다. 하지만 실제로 다 만들고 나서 글을 쓰는 지금은 ‘누구나 할 수 있다’고 확신한다. 만들 수 있을까 고민하는 과정에서 내 글을 접한 사람이라면 내 글을 따라오면서 시도해보기를 추천한다. 몇 번의 시행착오 끝에 나 같은 사람들을 위해 글을 쓰고 있기 때문이다. 이제 마지막으로 widjet 환경설정과 Google AdSense, Google Analytics 연동 방법을 살펴보자. 7. widjet 프로필 정보 수정하기우리가 수정해야 하는 환경설정은 거의 끝나간다. 이제 widjet 영역이다. 이제 드디어 프로필 이미지를 변경할 수 있나 했더니, 이미지를 변경할만한 코드는 보이지가 않았다. 코드에서 살펴보니 프로필 이미지는 _config.icarus.yml이 아닌 profile.jsx 파일에서 변경해야 했다. 프로필을 변경해보자. 아래 코드에서 url_for 내 이미지 파일을 변경해 주면 된다. 마찬가지로 이미지 경로는/icarus/source/img이다. blog/themes/icarus/layout/widjet.jsxfunction getAvatar() { if (gravatar) { return gravatrHelper(gravatar, 128); } if (avatar) { return url_for(avatar); } return url_for('/img/profile.jpg');} 이미지도 변경했으니 이제 프로필 내용을 변경해 주자. 이 부분은 상세 설명이 필요 없을 것 같아 코드로 설명을 대체한다. _config.icarus.yml# Sidebar widget configurations# http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: # Profile widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: profile # Author name author: boyoung-choi # Author title author_title: Web Publisher # Author's current location location: Korea, Seoul # URL or path to the avatar image avatar: # Whether show the rounded avatar image avatar_rounded: false # Email address for the Gravatar gravatar: # URL or path for the follow button follow_link: 'https://github.com/im-boyoung-choi' socical platform 링크도 설정할 수 있다. 나는 facebook, twitter, dribbble은 숨김 처리하고 그나마 사용 중인 instagram을 추가했다. _config.icarus.yml# Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/im-boyoung-choi' Instagram: icon: fab fa-instagram url: 'https://www.instagram.com/by1uv/' # Facebook: # icon: fab fa-facebook # url: 'https://facebook.com' # Twitter: # icon: fab fa-twitter # url: 'https://twitter.com' # Dribbble: # icon: fab fa-dribbble # url: 'https://dribbble.com' RSS: icon: fas fa-rss url: / 8. Google AdSense, Google Analytics 연동하기이제 진짜 마지막, Google AdSense, Google Analytics 연동하기만 남았다. 여기서 언급되지 않은 나머지 코드들은 내 기준에서는 커스텀의 필요성을 느끼지 못한 코드들이다. 혹시 커스텀 하면 좋을 부분이 있다면 의견을 남겨줘도 좋다. 8-1. Google AdSense 연동하기_config.icarus.yml# Google AdSense unit configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: adsense # AdSense client ID client_id: 'pub-3835045281579720' # AdSense AD unit ID slot_id: '26569024' client_id와 slot_id 역시 Google AdSense 사이트에서 확인이 가능하다. 접속 후 ‘시작하기’ 버튼을 누른 뒤, 내 GitHub 블로그 URL과 이메일 주소를 입력하고 ‘계속하기’ 버튼을 누른다. 회원가입과 동일하게 정보를 작성한다. 이때 본인의 주소를 정확히 입력해야 하는데, 우편물로 Pin 번호를 알려주고 그 번호를 입력해야만 수익이 지급되기 때문이라고 한다. 모든 절차가 끝나면 &lt;head&gt;에 삽입하라고 코드를 제공해 주는데, 우리는 이 코드를 /icarus/layout/common/scripts.jsx 내 Fragment 제일 하단에 다음과 같이 추가하면 된다. /icarus/layout/common/scripts.jsx &lt;Plugins site={site} config={config} page={page} helper={helper} head={false} /&gt; &lt;script src={url_for('/js/main.js')} defer&gt;&lt;/script&gt; &lt;script data-ad-client=&quot;ca-pub-3835045281579720&quot; async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;&lt;/Fragment&gt;; 정상적으로 코드를 추가한 뒤 Google AdSense 사이트로 돌아와 코드가 제대로 확인이 되는지 체크한 후 기다리면 된다. 단, 게시글이 부족한 경우 승인이 거절될 수도 있다는 점을 참고하자. 8-2. Google Analytics 연동하기_config.icarus.yml# Google Analytics plugin settings# https://analytics.google.comgoogle_analytics: # Google Analytics tracking ID tracking_id: G-9DCQC3CY3T tracking_id도 Google Analytics 사이트에서 확인이 가능하다. 접속 후 ‘측정 시작’ 버튼을 누른 뒤, 계정 이름에 본인 이름을 입력하고 ‘다음’ 버튼을 누른다 속성 설정 단계에서는 위와 같이 정보를 입력하고 다음으로 넘어간다. 비즈니스 정보 단계에서는 위와 같이 입력하고 만들기를 누른다. 비즈니스 정보 단계에서 입력하는 부분은 크게 중요하지 않다고 한다. ‘만들기’ 버튼을 누르면 약관 동의 팝업이 뜨는데 전체 동의 후 다음으로 넘어간다. 다음 화면에서 어떤 플랫폼에 적용할 것인지 선택 항목이 나오는데 여기서 웹을 선택한다. 이후 나오는 데이터 스트림 설정 화면에서 내 GitHub 블로그 URL을 입력한 뒤 ‘스트림 만들기’ 버튼을 누르면 ‘측정 ID’가 나온다. 이 ‘측정 ID’를 복사해서 tracking_id에 추가하면 된다. 이로써 기본 테마 환경설정은 끝이 났다. 다음 글에서는 본격적으로 블로그 스타일을 커스텀 하는 방법에 대해서 공유하려 한다.","link":"/2021/07/06/2107-post04/"},{"title":"마크다운(markdown) 문법의 거의 모든 것","text":"포스트 생성을 하고 .md 파일을 열어 글을 쓰려고 하는데 제목은 어떻게 만드는지, 링크는 어떻게 연결하고 이미지는 어떻게 넣는지 html 코드와는 비슷하지만 사뭇 다른 마크다운(markdown) 문법이 나에게는 낯설게 느껴졌다. 하지만 조금만 찾아보니 html 작성 방법보다 훨씬 간편하고, html 기본 지식이 없는 사람들도 쉽게 사용할 수 있는 언어었다. 마크다운(markdown) 문법을 살펴보기 전에 마크다운(markdown)이 도대체 무엇인지 간단히 살펴보자. 1. 마크다운(markdown)이란?위키백과에 의하면 (위키백과, 나무위키의 정의를 공식적으로 사용하는 것을 좋아하지는 않지만 마크다운에 대한 타 사전의 정의가 없는 관계로 양해 바란다.) 마크다운(markdown)은 일반 텍스트 기반의 경량 마크업 언어이다. 일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며, 일반 마크업 언어(html 등)에 비해 문법이 쉽고 간단한 것이 특징이다. html과 리치 텍스트(RTF) 등 서식 문서로 변환이 쉽기 때문에 응용 소프트웨어(운영 체제에서 사용되는 모든 소프트웨어)와 함께 배포되는 README 파일이나 온라인 게시글 등에 많이 사용된다. 쉽게 말해 텍스트만 사용해서 구조적인 글을 작성할 수 있게 돕는 언어라고 보면 될 것 같다. 언어가 쉬워 누구든지 사용할 수 있고, 별도의 프로그램 없이 사용할 수 있어 언제 어디서나 편집도 가능하며, 모든 브라우저에서 동일하게 확인할 수 있다는 점이 마크다운(markdown)의 대표적인 장점인 것 같다. 그에 반해 단점을 찾는다면 표준이 없어 사용자마다 문법이 조금 다를 수 있다는 점, 모든 html 태그를 대체할 수 없다는 점이 있다. 마크다운(markdown)에 대해 살펴보았으니 본격적으로 마크다운(markdown) 문법에 대해 살펴보자. 2. 마크다운(markdown) 문법하위 제목에 글머리 번호를 되도록 적는 편이지만 오늘은 그럼 글머리 번호가 너무 많이 생길 것 같아 번호 없이 태그 이름을 기준으로 정리하겠다. 제목(headers)가장 많이 쓰고, 가장 먼저 찾게 되는 문법이다. html &lt;h1&gt; ~ &lt;h6&gt; 제목 태그로 변환된다. 사용 방법# 첫 번째 제목 수준 &lt;h1&gt;## 두 번째 제목 수준 &lt;h2&gt;### 세 번째 제목 수준 &lt;h3&gt;#### 네 번째 제목 수준 &lt;h4&gt;##### 다섯 번째 제목 수준 &lt;h5&gt;###### 여섯 번째 제목 수준 &lt;h6&gt;첫 번째 제목 수준 &lt;h1&gt;의 또 다른 사용 방법==================================두 번째 제목 수준 &lt;h2&gt;의 또 다른 사용 방법---------------------------------- 샘플을 보여주려 했지만, 제목 태그를 쓰면 depth로 인식이 되기 때문에 제목 태그는 사용 방법만 기입하겠다. 일반적으로 사용하는 방법은 제목 수준에 따라 텍스트 앞에 ‘#’을 추가하는 것이다. 텍스트 강조(emphasis)이탤릭, 굵게, 취소, 밑줄 문법에 대해 살펴보자. 각각 html &lt;em&gt;, &lt;strong&gt;, &lt;del&gt;, &lt;u&gt; 코드로 변환된다. 사용 방법이탤릭 : 이탤릭체는 앞뒤로 *별표(asterisk)* 또는 _언더바(underbar)_ 를 1개씩 입력하면 된다.굵게 : 볼드체는 앞뒤로 **별표(asterisk)** 또는 __언더바(underbar)__ 를 2개씩 입력하면 된다.취소 : 취소선은 앞뒤로 ~~물결표(tilde)~~를 2개씩 입력하면 된다.밑줄 : 밑줄은 html 태그 그대로 &lt;u&gt;밑줄 태그&lt;/u&gt;를 사용하면 된다. 적용 결과이탤릭 : 이탤릭체는 앞뒤로 별표(asterisk) 또는 언더바(underbar) 를 1개씩 입력하면 된다.굵게 : 볼드체는 앞뒤로 별표(asterisk) 또는 언더바(underbar) 를 2개씩 입력하면 된다.취소 : 취소선은 앞뒤로 물결표(tilde)를 2개씩 입력하면 된다.밑줄 : 밑줄은 html 태그 그대로 밑줄 태그를 사용하면 된다. 수평선(horizontal rule)html &lt;hr&gt; 태그로 변환된다. 하이픈(hyphen), 별표(asterisk), 언더바(underbar)를 3번 입력하면 된다. 사용 방법---***___ 링크(link)html &lt;a&gt; 태그로 변환된다. 단순 링크 연결뿐만 아니라 상대 링크, 참조 링크 등 다양하게 활용할 수 있으니 아래 사용 방법을 자세히 읽어보자. 사용 방법[기본적인 링크 연결 방법 네이버 홈페이지 이동](https://www.naver.com/)[기본적인 링크 연결 방법 네이버 사전 이동 + alt 문구 추가(마우스 오버 확인)](https://dict.naver.com/ &quot;네이버 사전으로 이동합니다.&quot;)[상대 링크](./../../../../)[참조 링크 활용 네이버 뉴스 이동][news][참조 링크 활용 네이버 금융 이동 + alt 문구 추가(마우스 오버 확인)][finance][news]: https://news.naver.com/[finance]: https://finance.naver.com/ &quot;네이버 금융으로 이동합니다.&quot;일반 url이나 꺾쇠괄호 안의 url은 자동으로 링크가 연결됩니다.네이버 부동산 : https://land.naver.com/네이버 지도 : &lt;https://map.naver.com/&gt; 적용 결과기본적인 링크 연결 방법 네이버 홈페이지 이동기본적인 링크 연결 방법 네이버 사전 이동 + alt 문구 추가(마우스 오버 확인)상대 링크참조 링크 활용 네이버 뉴스 이동참조 링크 활용 네이버 금융 이동 + alt 문구 추가(마우스 오버 확인) 일반 url이나 꺾쇠괄호 안의 url은 자동으로 링크가 연결됩니다.네이버 부동산 : https://land.naver.com/네이버 지도 : https://map.naver.com/ 이미지(image)html &lt;img&gt; 태그로 변환된다. 링크 연결 방법과 비슷하니 헷갈리지 않게 조심하자. 사용 방법![이미지 설명 문구 : 샘플 이미지 01](/img/sample-img01.jpg &quot;alt 문구 입력(마우스 오버 확인)&quot;)![샘플 이미지 02](/img/sample-img02.jpg)![샘플 이미지 03][sample-img03][sample-img03]: /img/sample-img03.jpg &quot;alt 문구 입력(생략 가능)&quot;// 중요, 이미지에 링크 연결하기[![샘플 이미지 원본, 클릭하면 home 화면으로 이동](/img/sample-img.jpg)](./../../../../) GitHub Blog에서 이미지를 노출하기 위해서는 /blog/source/img/ 폴더 내 이미지 파일을 추가한 뒤 /img/이미지명.확장자로 이미지를 불러오거나, 절대 경로를 통해 불러와야 한다. 이미지에 링크를 연결하는 방법은 쉽지만, 문법이 헷갈릴 수 있으니 구조를 잘 기억해두자. 목록(list)나는 아직 사용하진 않았지만, 글을 정리할 때 자주 쓰이는 문법이다. html &lt;ul&gt;, &lt;ol&gt;, &lt;li&gt; 목록 태그로 변환된다. 사용 방법1. 순서가 필요한 목록 첫 번째1. 순서가 필요한 목록 두 번째 2. 첫 번째의 첫 번째(순서 필요 있음) 2. 첫 번째의 두 번째(순서 필요 있음)1. 순서가 필요한 목록 세 번째 - 세 번째의 하위(순서 필요 없음) - 세 번째의 하위(순서 필요 없음) 1. 순서가 필요 없는 목록에 사용 가능한 기호 - 하이픈(hyphen) + 더하기(plus) * 별표(terisk) 적용 결과 순서가 필요한 목록 첫 번째 순서가 필요한 목록 두 번째 첫 번째의 첫 번째(순서 필요 있음) 첫 번째의 두 번째(순서 필요 있음) 순서가 필요한 목록 세 번째 세 번째의 하위(순서 필요 없음) 세 번째의 하위(순서 필요 없음) 순서가 필요 없는 목록에 사용 가능한 기호 하이픈(hyphen) 더하기(plus) 별표(terisk) 순서가 필요한 목록은 글머리에 숫자를 넣어주면 되는데 어떤 숫자를 넣든 자동으로 넘버링 해준다. 다시 1부터 시작하는 순서가 필요한 목록을 만들고 싶을 땐 줄바꿈 처리를 2번 해주면 된다. 하위 목록을 만들려면 글머리 앞에 tab 키로 들여 쓰기를 2번 넣어주면 된다. 순서가 필요 없는 목록에 사용 가능한 기호는 동일한 기호를 같은 목록의 자식 요소로 가져오기 때문에 위 설명 코드처럼 사용하면 ‘순서가 필요 없는 목록에 사용 가능한 기호’ 아래 3개의 &lt;ul&gt; 태그가 생성된다. 개발자 도구(F12)를 열어 변환된 html 코드를 확인해보자. 테이블(table)블로그 글을 작성하는데 빠지지 않고 사용되는 문법이다. html &lt;table&gt; 태그로 변환된다. 테이블 문법은 사용할 때 알아야 하는 몇 가지 규칙이 더 있다. 헤더 셀을 구분할 때 구분 셀에 하나 이상의 하이픈(hyphen)을 넣어줘야 한다. 헤더 셀을 구분할 때 콜론(colon)을 활용해서 정렬을 설정할 수 있다. 하지만 열의 정렬을 다르게 지정할 수는 없고, 정렬을 지정하지 않으면 왼쪽 정렬(기본값)이 적용된다. 가장 좌측과 우측의 파이프 문자(vertical bar)는 생략이 가능하다. 이전 포스팅에서 사용했던 테이블의 일부를 샘플로 가져왔다. 본문 내용과는 상관없는 내용이니 형태만 확인해 보자. 사용 방법|설정값|설명|기본값||:-:|-|:-:||title|포스트 제목을 입력하는 곳입니다.|filename(post only)|date|포스트 생성일을 입력하는 곳입니다.|파일이 생성된 날짜||updated|포스트 갱신일을 입력하는 곳입니다.|파일이 게시된 날짜| 설정값 설명 기본값 title 포스트 제목을 입력하는 곳입니다. filename(post only) date 포스트 생성일을 입력하는 곳입니다. 파일이 생성된 날짜 updated 포스트 갱신일을 입력하는 곳입니다. 파일이 게시된 날짜 나는 테이블 헤더 정렬은 무조건 가운데 정렬로 맞추고 싶어서 /include/style/article.styl 파일 내에 table thead th 스타일을 text-align: center로 지정해뒀다. 이런 강제 스타일 지정이 없으면 위에서 보이는 ‘설명’ 열과 같은 정렬 구조는 만들어질 수 없다. 인라인(inline) 코드 강조전체 코드가 아닌 부분 코드를 표현 및 강조할 수 있는 문법이다. 사용하고자 하는 코드 앞뒤로 backtick(`)을 입력해 주면 된다. html &lt;code&gt; 태그로 변환된다. 사용 방법`inline` 코드를 강조하는 방법입니다. 적용 결과inline 코드를 강조하는 방법입니다. 인용문 스타일 때문에 눈에 잘 띄지 않지만 실제로 사용할 때는 background-color가 눈에 띈다. (이런 느낌이다.) 블록(block) 코드 강조코드 샘플을 소스 코드 편집기 형태로 보여주는 문법이다. backtick(`)을 코드 샘플 위아래로 3번씩 입력하면 된다. html &lt;figure&gt; 태그로 변환된다. 사용 방법```(언어) 파일 위치 또는 제목샘플 코드``` ```html test.html&lt;p&gt;이렇게 샘플 코드를 입력하면 됩니다.&lt;/p&gt;``` 적용 결과 test.html&lt;p&gt;이렇게 샘플 코드를 입력하면 됩니다.&lt;/p&gt; 인용문(blockquote)원래는 인용문을 표기할 때 사용하는 스타일인데 강조하고 싶을 때, 묶어서 한 번에 보여주고 싶을 때도 사용된다. html &lt;blockquote&gt; 태그로 변환된다. 사용 방법&gt;내용 앞에 닫힌 꺾쇠괄호를 달아주면 된다.&gt;&gt;중첩으로도 사용이 가능하다.&gt;중첩을 사용한 뒤 이전 단계로 되돌리는 것은&gt;&gt;이렇게 중첩의 단계를 달리해도 불가능이다. 적용 결과내용 앞에 닫힌 꺾쇠괄호를 달아주면 된다. 중첩으로도 사용이 가능하다.중첩을 사용한 뒤 이전 단계로 되돌리는 것은이렇게 중첩의 단계를 달리해도 불가능이다. 이스케이프(escape)특히 개발 관련 글을 적다 보면 실제 html 코드를 쓰거나 markdown 코드를 글에 명시할 때가 있는데, 실제 코드가 먹혀버리면 곤란하다. 그럴 때 코드의 역할을 수행하지 못하게 하는 역할이 역슬래시(backslash)다. 아래 예시를 살펴보자. 사용 방법예를 들면, 제목 태그를 생성해주는 '\\#'도 이와 같이 역슬래시와 함께 사용하면 특수문자 그대로 노출된다.역슬래시도 태그의 일종이기 때문에 마찬가지로 2개를 사용하면 \\\\ 특수문자 역슬래시 하나만 노출된다. 적용 결과예를 들면, 제목 태그를 생성해주는 ‘#‘도 이와 같이 역슬래시와 함께 사용하면 특수문자 그대로 노출된다.역슬래시도 태그의 일종이기 때문에 마찬가지로 2개를 사용하면 \\ 특수문자 역슬래시 하나만 노출된다. 이렇게 markdown 문법에 대해 전반적으로 살펴봤다. 사용성이 최고의 장점인 문법이기 때문에 여기에 있는 것만 익혀 잘 활용한다면 원하는 대부분의 형태를 만들어 낼 수 있다. 이제 이 문법을 잘 활용해서 꾸준히 포스팅을 하는 것만 남았다.","link":"/2021/08/05/2108-post02/"},{"title":"내 맘대로 GitHub Blog 커스텀 하기","text":"설치도 환경설정도 끝났으면 드디어 GitHub 블로그를 선택한 진가가 발휘되는 순간이다. icarus 테마는 기본 구성 자체가 모던하고 심플해서 몇 가지 포인트 되는 부분만 커스텀 해도 나만의 색깔을 확실히 보여줄 수 있다. 나는 기본 icarus 스타일을 최대한 활용해서 깔끔한 베이스에 포인트 컬러를 얹는 형태로 디자인을 커스텀 할 예정이다. 눈에 확실히 드러나는 디자인 요소보다는 사소할 수도 있는 여백이나 폰트 사이즈 수정이 더 많을 수 있다. 커스텀을 시작하기 앞서 몇 가지 확인해야 할 것들이 있다. 먼저 수정사항이 반영됐는지 local에서 확인하고 싶다면 hexo server를 통해 확인할 수 있다. 수정사항이 자동으로 반영되기는 하지만, 반영이 느리면 터미널에서 Ctrl + C hexo server를 실행해 서버를 껐다 켜주면 된다. (이렇게 해도 안된다면 hexo clean까지 실행해보자.) 작업 파일들이 어디에 위치해 있는지도 알아야 한다. 주요 폴더 구조는 아래와 같다. blog ├ scaffolds //포스트를 생성할 때 기반이 되는 파일 저장소├ source│ ├ _draft //임시 포스트 저장소│ └ _posts //포스트 저장소├ themes│ └ icarus│ ├ include│ │ └ style //커스텀에 필요한 .styl 파일 저장소│ ├ layout //화면 구조 수정에 필요한 .jsx 파일 저장소│ └ sourc│ └ img //환경설정에서 필요했던 이미지 저장소├ config.yml└ config.icarus.yml 설명을 주석으로 달아놨으니 추가 설명은 하지 않겠다. 오늘 우리는 /icarus/include/style과 /icarus/include/layout 폴더 내에 있는 파일들을 주로 수정할 것이다. 확인해야할 사항들을 훑어봤으니 이제 본격 커스텀에 들어가 보자. 1. 칼럼 비율 조정하기icarus 테마를 설치하고 화면을 보면 제일 먼저 답답한 느낌이 들 수 있다. 게시글 노출 영역의 비율이 좁아서 가독성이 떨어지기 때문이다. /icarus/layout/layout.jsx 파일을 열어 게시글 노출 영역의 칼럼 비율을 조정해보자. /icarus/layout/layout.jsx&lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-9-tablet is-9-desktop is-9-widescreen': columnCount === 2, //수정 'is-9-tablet is-9-desktop is-6-widescreen': columnCount === 3})} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt;} 자신의 columnCount에 맞춰 해당되는 코드를 수정하면 된다. 나는 위젯과 게시글 영역, 총 2 칼럼만 노출 중이기 때문에 columnCount === 2에 해당되는 코드를 수정했다. 수정된 게시글 칼럼에 맞춰 /icarus/layout/common/widget.jsx 파일에서 위젯 칼럼 비율도 조정해보자. /icarus/layout/common/widget.jsxfunction getColumnSizeClass(columnCount) { switch (columnCount) { case 2: return 'is-3-tablet is-3-desktop is-3-widescreen'; //수정 case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; } return '';} 'is-12': columnCount === 1을 통해 전체 너비가 12 칼럼이라는 것을 유추해낼 수 있다. 총합이 12 칼럼이 되도록 칼럼 너비를 조정해야 화면에 여백이 생기지 않는다. 칼럼 너비를 수정해도 답답하다고 느끼는 사람들은 container의 너비를 직접 수정해야 한다. 나는 칼럼 비율 조정만으로도 충분하다고 느껴 추가 수정을 하진 않았지만, 필요한 사람은 /icarus/include/style/base.styl 파일 내 아래 코드에서 container 너비를 직접 수정하자. /icarus/include/style/base.styl$gap ?= 64px$tablet ?= 769px$desktop ?= 1088px$widescreen ?= 1280px$fullhd ?= 1472px 2. 웹 폰트 변경하기icarus 테마는 기본 폰트가 ‘Ubuntu’ 폰트다. 한글 폰트로 적합하지 않을뿐더러 영문 폰트로 사용하기에도 밋밋한 감이 있어 폰트를 변경했다. 웹 폰트는 Google Fonts 사이트에 가면 언어별로 다양한 종류를 받을 수 있다. 나는 한글 폰트는 ‘Noto Sans KR’, 영문 폰트는 ‘Poppins’를 선택했다. 우선 Google Fonts에서 본인이 원하는 폰트를 선택 후, 추가하고 싶은 굵기의 폰트 샘플 우측에 있는 ‘+ select this style’을 선택한다. 폰트 선택이 끝났으면 우측 화면에 생긴 ‘selected family’ 창 가운데에 위치한 ‘use on the web’ 내에 &lt;link&gt; / @import 중 @import를 선택하고 그 아래 생기는 샘플 코드에서 &lt;style&gt; 내 @import url('...') 코드를 복사한다. 방금 복사한 코드를 /icarus/include/style/base.styl 제일 상단에 추가하면 성공적으로 웹 폰트를 불러올 수 있다. /icarus/include/style/base.styl@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;700;900&amp;family=Poppins:wght@300;400;500;700;900&amp;display=swap'); 웹 폰트를 추가했으니, font-family를 수정해보자. 마찬가지로 /icarus/include/style/base.styl 파일에서 $family-sans-serif를 찾아 본인이 선택한 폰트를 ‘Ubuntu’ 폰트 앞에 추가하면 된다. ‘Noto Sans KR’ 폰트는 영문을 지원하기 때문에 한글 폰트를 지원하지 않는 ‘Poppins’ 폰트를 먼저 선언하고 ‘Noto Sans KR’ 폰트를 선언해 줬다. /icarus/include/style/base.styl$family-sans-serif ?= 'Poppins', 'Noto Sans KR', Ubuntu, Roboto, 'Open Sans', 'Microsoft YaHei', sans-serif 3. 포인트 색상 변경하기icarus 테마를 커스텀하면서 제일 짜릿했던 순간이 색상을 변경했을 때다. 색상 변경만으로 icarus 테마를 그대로 받아 사용하는 느낌을 없앨 수 있다. 물론 icarus 테마를 그대로 활용하는 것도 좋지만, 나는 ‘나만의 특색있는 블로그’를 만들고 싶었기 때문에 포인트 색상 변경이 중요한 작업이었다. 3-1. base.styl 수정하기먼저 primary color 선언 값을 수정해보자. /icarus/include/style/base.styl 파일을 열어 $primary 항목을 찾고 $blue 대신 원하는 색상 값을 넣어주면 된다. 나는 보라색 색상 값인 #8721FF를 넣었다. /icarus/include/style/base.styl$primary ?= #8721FF 하나의 색상 값을 변경했을 뿐인데 로딩 바 색상, navibar item 활성화 시 색상, 팔로우 버튼 색상 등이 변경된 것을 확인할 수 있다. 3-2. navibar.styl 수정하기navibar item이 활성화됐을 때 색상은 수정됐는데, 마우스 오버된 item 색상은 기존 색과 동일하다. /icarus/include/style/navibar.styl 파일을 열어 마우스 오버됐을 때 색상 코드를 지정해 주자. (대략 37번째 라인) /icarus/include/style/navibar.styl.navbar-item display: flex align-items: center padding: $navbar-item-padding-v $navbar-item-padding-h margin: $navbar-item-margin-v $navbar-item-margin-h &amp;:hover //추가 된 부분 color: #8721FF &amp;.is-active color: #8721FF //추가 된 부분 (반응형일 때) background-color: transparent navibar 전체 색상 변경이 완료됐다. 3-3. footer.styl 수정하기이제는 footer 색상을 수정하면 된다. footer copyright 영역을 보면 링크 텍스트가 포인트 색임을 알 수 있다. /icarus/include/style/footer.styl 파일을 열어 .level-start 하위에 p 태그를 컨트롤하는 코드를 추가하면 된다. 색상 변경은 아니지만 파일을 열었으니 좁은 copyright 줄 간격도 같이 수정해보자. /icarus/include/style/footer.stylfooter.footer .level-start p //추가 된 부분 a color: #8721FF &amp;:hover color: inherit span &amp;:last-child line-height: 2.4; +mobile() text-align: center hexo theme 커스텀에서 색상 바꾸기가 까다롭다고 느낀다면, 어디서 색상 값을 불러오고 있는 건지 확인이 어렵기 때문일 것이다. 하지만 /icarus/include/style 내에 있는 해당 영역에 맞는 .styl 파일을 찾아 코드를 새로 추가해 준다고 생각하면 손쉽게 바꿀 수 있다. 위와 비슷한 방법으로 card.styl에서는 게시글 상단 카테고리 depth 색상, widget.styl에서는 게시글 카탈로그 색상을 변경했다. 본인이 사용하는 기능에 따라 수정해야 하는 영역이 다를 수 있으니 방법을 알았다면 본인 블로그의 화면을 살펴 가며 색상을 적용해보자. 4. 디테일 잡기내가 생각했을 때 눈에 확실히 띄는 큰 수정사항들은 작업이 끝났다. 지금부터는 작은 디테일들을 수정해볼 것이다. 4-1. follow 버튼 둥근 모서리 없애기widjet profile 영역에 있는 follow 버튼의 둥근 모서리를 수정해보자. /icarus/layout/widjet/profile.jsx 파일을 열면 followLink 영역의 코드를 찾을 수 있는데, a 태그 내에서 is-rounded 클래스를 삭제해 주면 된다. /icarus/layout/widjet/profile.jsx{followLink ? &lt;div class=&quot;level&quot;&gt; &lt;a class=&quot;level-item button is-primary&quot; href={followLink} target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;{followTitle}&lt;/a&gt;&lt;/div&gt; : null} 4-2. card 스타일 수정하기icarus 테마를 보면 하얀색 박스로 대부분의 영역들이 묶여 있는 것을 볼 수 있다. 이 하얀색 박스가 card 영역이다. /icarus/layout/widjet/card.styl 파일을 보면 관련된 스타일을 한 번에 볼 수 있다. 콘텐츠 미리보기 영역을 봤을 때, 여백이 너무 좁다고 생각되어 아래 코드를 통해 여백값을 수정했다. /icarus/include/style/card.styl.card overflow: visible border-radius: $card-radius .card-content //추가 된 부분 padding: 2rem !important 이정도면 됐다 싶어 여기 저기 페이지를 살펴보던 중 categories 메뉴로 이동하면 나오는 카테고리를 클릭하니 처음보는 breadcrumb 영역이 나왔다. 여기서도 icarus 기본 색상인 파란색이 사용되고 있어 강제로 색상을 변경해줬다. /icarus/include/style/card.styl.card-content padding: 2rem!important .breadcrumb //추가된 부분 a color: #8721ff li &amp;.is-active a color: #363636 4-3. 폰트 사이즈 및 여백 수정하기게시글의 폰트 사이즈와 여백을 수정해보자. /icarus/include/style/article.styl 파일을 열면 article 영역의 스타일을 확인 할 수 있다. 나는 게시글 제목의 폰트가 너무 크고 article-meta와의 간격이 좁다고 생각되어 아래 코드를 추가해서 스타일을 변경했다. 제목 부분 코드를 보면 다양한 class의 영향을 받고있는데 폰트 사이즈만 강제로 변경, 여백은 추가이기 때문에 class를 수정하는 것보다 스타일을 강제하는게 관리에 있어 더 용이하다고 판단했다. /icarus/include/style/article.styl&amp;.article h1 //추가 된 부분 font-size: 1.9rem!important margin: 1rem 0 3rem .article-meta, .article-tags color: $text-light 제목 스타일 수정이 끝났으면 이제 콘텐츠를 살펴보자. 콘텐츠 영역을 봤을 때 전반적으로 폰트 사이즈가 작아 가독성이 떨어진다고 느꼈다. 변경된 제목 폰트 사이즈를 기준으로 content 자식들의 폰트 사이즈를 수정해보자. 나는 콘텐츠를 작성할 때 소제목으로 &lt;h3&gt;과 &lt;h4&gt;를 사용하기 때문에 해당 태그 스타일에 font-weight도 추가했다. (콘텐츠 작성법은 다음에 자세히 다룰 예정이다.) /icarus/include/style/article.styl.content word-wrap: break-word font-size: 1.2rem //수정 된 부분 h1 font-size: 1.9em //수정 된 부분 h2 font-size: 1.75em //수정 된 부분 h3 font-size: 1.4em //수정 된 부분 font-weight: 500 //추가 된 부분 h4 font-size: 1.125em //수정 된 부분 font-weight: 500 //추가 된 부분 제목과 소제목 스타일 지정이 끝났다. 이제 문단 스타일을 살펴보자. 콘텐츠를 작성할 때 &lt;a&gt; 태그로 링크를 연결하면 폰트 색상이 변경되는데 icarus 기본 색상인 파란색으로 나타나기 때문에 아래 코드를 추가하여 색상을 변경해주자. 코드를 추가하는 위치는 .content 하위 어느 곳이든 상관없지만 나는 코드의 개연성을 위해 위에서 수정한 heading 태그 스타일 아래 코드를 추가했다. /icarus/include/style/article.styl.content h1, h2, h3, h4, h5, h6 //추가 된 부분 a color: $primary &amp;:hover color: inherit p //추가 된 부분 a color: $primary &amp;:hover color: inherit 폰트 사이즈를 변경했는데도 가독성이 떨어지는 느낌은 여전하다. 아래 코드를 추가하여 줄 간격과 문단 사이의 여백을 수정하자. /icarus/include/style/article.styl.content p line-height: 1.8 //추가 된 부분 &amp;:not(:last-child) //추가 된 부분 margin-bottom: 1.8rem a color: $primary &amp;:hover color: inherit 4-4. 이미지 스타일 수정하기이번에는 이미지 스타일을 지정해보자. 나는 이미지 영역이 확실하게 구분이 갔으면 좋겠다고 생각해서 border 값을 추가했다. 또 이미지에 대한 설명은 이미지 아래 작성하는 것을 기본 원칙으로 정하고 이미지에 margin-top 값을 추가해서 콘텐츠의 흐름을 잡았다. 콘텐츠를 작성하면서 추가하는 이미지 스타일을 지정하는 것이기 때문에 위 스타일들과 마찬가지로 .content 하위에 아래 코드를 추가하면 된다. /icarus/include/style/article.styl.content img //추가 된 부분 border: 1px solid rgba(0,0,0,0.12) margin-top: 1rem 5. 공유 이미지 지정하기대략적인 커스텀은 끝났다. 위 과정을 통해 지금의 블로그 모습이 탄생했다. 큰 수정 없이도 기본 icarus 테마와는 다른 느낌을 만들 수 있다. 이대로 커스텀을 마무리하고 친구에게 블로그 링크를 공유했는데 공유 이미지가 눈에 들어왔다. 기본 스타일은 ‘icarus’ 문구가 가운데 박힌 이미지였다. 다른 icarus 테마 적용 블로그를 공유했을 때는 이런 공유 이미지를 보지 못했는데 다들 커스텀을 했거나 글에 사용된 대표 이미지가 공유 이미지로 사용된 것 같다. 나는 프로필 이미지와 비슷한 나만의 이미지를 만들어 공유 이미지로 지정했다. 공유 이미지로 사용할 이미지는 /icarus/source/img 폴더 내에 저장하고 /icarus/layout/common/head.jsx 파일을 열어보자. (대략) 67번째 라인을 보면 og.image를 설정하는 코드가 나온다. 코드를 살펴보니 커스텀을 하지 않은 블로그 글에서도 기본 icarus 이미지를 잘 볼 수 없었던 이유를 알 것 같다. 제일 마지막 else 내 코드에서 이미지 파일명을 수정하거나 icarus/source/img 폴더 내에 og_image.png 이름으로 변경할 이미지를 저장해 주면 된다. /icarus/layout/common/head.jsxif (typeof page.og_image === 'string') { images = [page.og_image]; } else if (typeof page.cover === 'string') { images = [url_for(page.cover)]; } else if (typeof page.thumbnail === 'string') { images = [url_for(page.thumbnail)]; } else if (article &amp;&amp; typeof article.og_image === 'string') { images = [article.og_image]; } else if (page.content &amp;&amp; page.content.includes('&lt;img')) { let img; images = []; const imgPattern = /&lt;img [^&gt;]*src=['&quot;]([^'&quot;]+)([^&gt;]*&gt;)/gi; while ((img = imgPattern.exec(page.content)) !== null) { images.push(img[1]); } } else { images = [url_for('/img/sharedImage.jpg')]; //수정 된 부분 } 이미지를 변경한 뒤 다시 링크를 공유하면 공유 이미지가 변경된 것을 확인할 수 있다. 혹시 이미지를 변경해도 적용되지 않는다면 kakao developers에서 OG(Open Graph) 캐시 초기화를 실행해보자. 이렇게 진짜 커스텀을 마무리했다. 이번 글은 ‘똑같이 따라 하면서 블로그를 커스텀 해보세요’가 아니라 ‘이런 스타일을 변경하고 싶으면 이렇게 파일을 찾아서 이렇게 수정하면 됩니다’하는 의미로 작성됐다. 내가 커스텀을 진행하면서 어려웠던 점은 블로그 글이 생각보다 많지 않고 초보들이 따라 하기에는 상세하지 않아 따라 해도 적용이 안되거나, 중간에 막힌다는 점이었다. 나와 같은 초보자들에게 도움이 되기 위해 커스텀 과정을 최대한 상세하게 기술했으니 혹시 헤매다 이 글까지 도달한 사람이 있다면 꼭 실마리를 찾아갔으면 좋겠다.","link":"/2021/07/29/2107-post05/"},{"title":"hexo 포스팅의 거의 모든 것","text":"블로그를 만들고 커스텀까지 끝낸 뒤 ‘드디어 첫 게시글을 쓸 수 있다, 이제 속도를 내보자’라고 생각했는데 아직 마지막 관문이 남아 있었다. 이번 게시글까지만 잘 따라오면 이제 당신은 진정한 GitHub Blogger가 될 수 있다. 이전 게시글에서 설명한 Github Blog 제작 및 커스텀 방법을 굳이 난이도 5단계라고 본다면 (굳이 그렇게 보는 것이다. 해보면 알겠지만 누구나 할 수 있을 만큼 쉽다.) 이번 글에서 설명하는 방법들은 난이도 1단계라고 볼 수 있다. 즉, 방법만 안다면 누구나 눈 감고도 할 수 있다. 먼저 포스트를 만드는 방법부터 알아보자. 1. hexo 포스팅포스팅을 위해서는 먼저 포스팅을 진행할 파일을 생성해야 한다. 아래 순서를 따라 포스트를 생성해보자. 1-1. hexo new 명령어로 포스트 생성하기포스트를 만들기 위해서 hexo new 명령어를 사용해볼 것이다. hexo new 기본 사용법은 아래와 같다. $ hexo new [layout 종류] [포스트명] hexo layout 종류는 post, draft, page 3가지가 있다. post는 곧바로 포스트를 생성 및 게시한다. 기본값으로 hexo new 명령어를 사용할 때 [layout 종류]를 기입하지 않으면 자동으로 post의 역할을 수행한다. draft는 초안을 생성하는 명령어로 포스트를 생성하고 게시하지 않는다. 배포 전에는 글이 노출되지 않고, 로컬 서버에서도 hexo server --draft 명령어를 통해서만 확인할 수 있다. page는 포스트를 생성하는 것이 아니라 새로운 페이지를 생성한다. post와 draft는 실행 시 각각 /blog/source/_posts와 /blog/source/_drafts 폴더에 [포스트명].md 파일이 생성된다. page는 /blog/source/ 경로에 [포스트명] 폴더가 생성된다. 나는 항상 초안을 작성한 뒤 포스트를 게시할 계획이어서 기본값을 post에서 draft로 변경했다. 기본값을 수정하기 위해서는 /blog/_config.yml 파일에서 default_layout 값을 draft로 수정하면 된다. 변경 후에 아래와 같이 명령어를 실행하면 post가 아닌 draft 역할을 수행한다. $ hexo new [포스트명] 1-2. hexo publish 명령어로 초안 게시하기draft 파일 생성 후 포스트 작성을 완료했으면 이제 포스팅을 해 볼 시간이다. 파일을 단순히 /blog/source/_drafts 폴더에서 /blog/source/_posts 폴더로 옮기는 방법도 있지만, 포스팅 게시 일시가 draft 파일 생성 일시로 들어가는 경우가 있기 때문에 명령어를 활용해서 게시하는 것이 좋다. (명령어를 사용하면 포스팅한 시간을 기준으로 게시 일시가 노출된다.) draft 파일 게시 명령어는 아래와 같다. $ hexo publish [포스트명] 2. 포스트 설정값 세팅하기실제로 포스팅을 진행하기 앞서 포스트 설정값을 세팅하는 방법에 대해 알아보자. 포스트 별로 제목, 카테고리, 태그 등 기본값 세팅은 머리말(front matter)에서 선언할 수 있다. 아래 표를 통해 머리말(front matter)에 들어가는 설정값들을 살펴보자. 설정값 설명 기본값 title 포스트 제목 filename(post only) date 포스트 생성일 파일이 생성된 날짜 updated 포스트 갱신일 파일이 게시된 날짜 comments 포스트에서 코멘트 기능을 사용할 것인가 true tags 포스트 태그(page에서는 사용 불가) categories 포스트 카테고리(page에서는 사용 불가) permalink 포스트 기본 링크 재정의 모든 설정값을 선언할 필요 없이 본인이 사용하고 싶은 설정값만 지정하면 된다. 나는 타이틀, 카테고리, 태그만 설정하고 나머지는 기본값을 사용하도록 했다. 아래 코드는 현재 포스트에 사용된 머리말(front matter) 중 포스트 설정값에 대한 부분이다. /blog/source/(_drafts)/2108-post01.mdtitle: hexo 포스팅의 거의 모든 것categories: - blog - hexotags: - blog - hexo - post - draft - page - front matter - scaffolds // 카테고리와 태그는 아래 형식으로 선언해도 된다.categories: [blog, hexo]tags:[blog, hexo, post, draft, page, front matter, scaffolds] 3. 위젯 설정값 세팅하기hexo 블로그를 살펴보다 보면 블로그마다 게시글을 선택했을 때 위젯 요소들이 다른 것을 볼 수 있다. 이는 위에서 언급한 머리말(front matter)에 게시글을 볼 때 노출시킬 위젯을 따로 설정할 수 있기 때문이다. 나는 프로필만 home 화면과 동일한 형태로 노출하고 1. 필요 없는 ‘최근 글’, ‘아카이브’ 영역을 삭제 2. 게시글을 볼 때 추가되면 좋을 것 같은 ‘카탈로그’ 영역을 추가했다. 3-1. 프로필 위젯 설정하기프로필을 그대로 가져오려면 처음 블로그를 만들면서 설정값을 지정했던 _config.icarus.yml 파일에서 프로필 구성을 가져와야 한다. _config.icarus.yml 파일 widget 설정 영역에서 Profile widget configurations 부분 코드를 가져오자. (가져올 때 주석 영역은 과감히 삭제해도 좋다.) 나는 코드를 가져와 아래와 같이 머리말(front matter)에 추가했다. /blog/source/(_drafts)/2108-post01.mdwidgets: - position: left type: profile author: boyoung-choi author_title: Web Publisher location: 'Korea, Seoul' follow_link: 'https://github.com/im-boyoung-choi' social_links: Github: icon: fab fa-github url: 'https://github.com/im-boyoung-choi' Instagram: icon: fab fa-instagram url: 'https://www.instagram.com/by1uv/' RSS: icon: fas fa-rss url: / 3-2. 카탈로그 위젯 설정하기새로 추가하기로 한 카탈로그 영역과 home 화면 위젯에서 유지하기로 한 카테고리, 광고 영역 중 카탈로그 영역이 글을 읽을 때 더 필요하다고 판단하여, 카테고리, 광고 위젯을 가져오기 전에 카탈로그 영역을 추가했다. 카탈로그 영역을 추가하려면 프로필 영역을 추가하기 위해 만든 widgets ~ 하위에 코드 추가하는 것 외에 widgets과 같은 레벨에서 toc: true을 선언해 줘야 한다. 이후 프로필 영역 코드 아래에 카탈로그 관련 코드를 삽입하면 된다. 아래 코드를 참고해보자. /blog/source/(_drafts)/2108-post01.mdwidgets: - position: left type: profile // (코드 생략) - position: left type: toc index: false // 글머리, 번호 매기기. 기본값 true(허용) collapsed: true // 스크롤에 따라 depth 접었다 펴기. 기본값 true(허용) depth: 3 // depth 깊이. 기본값 3 나는 collapsed, depth는 기본값을 사용할 것이라 index 선언 코드까지만 프로필 영역 뒤에 추가했다. 3-3. 카테고리, 광고 위젯 설정하기카테고리와 광고 위젯은 프로필 위젯을 추가한 것과 같이 _config.icarus.yml 파일에서 구성을 그대로 가져와 순서에 맞춰 추가하면 된다. 나는 프로필-카탈로그-카테고리-광고 순서로 위젯을 노출하기 위해 아래와 같이 카탈로그 영역 코드 아래에 관련 코드를 삽입했다. /blog/source/(_drafts)/2108-post01.mdwidgets: - position: left type: profile // (코드 생략) - position: left type: toc // (코드 생략) - position: left type: categories - position: left type: adsense client_id: pub-3835045281579720 slot_id: '26569024' 나는 삭제하기로 하여 추가하지 않았지만 최근 글, 아카이브 영역을 추가하고 싶다면 카테고리, 광고 영역 추가와 같은 방법으로 진행하면 된다. 3-4. 위젯 영역 고정하기위 과정까지 잘 따라왔다면 원하는 모양으로 위젯이 생긴 것을 확인할 수 있을 것이다. 하지만 위 과정까지만 하면 위젯이 스크롤에 반응하여 화면에 고정되지 않는다. 아래 코드를 추가하여 위젯을 고정해보자. /blog/source/(_drafts)/2108-post01.mdwidgets: // (코드 생략)sidebar: left: sticky: true // 기본값 false(고정 안함) 현재 게시글에 사용된 머리말(front matter) 전체 코드는 아래와 같다. /blog/source/(_drafts)/2108-post01.mdtitle: hexo 포스팅의 거의 모든 것categories: - blog - hexotags: - blog - hexo - post - draft - page - front matter - scaffolds toc: truewidgets: - position: left type: profile author: boyoung-choi author_title: Web Publisher location: 'Korea, Seoul' follow_link: 'https://github.com/im-boyoung-choi' social_links: Github: icon: fab fa-github url: 'https://github.com/im-boyoung-choi' Instagram: icon: fab fa-instagram url: 'https://www.instagram.com/by1uv/' RSS: icon: fas fa-rss url: / - position: left type: toc index: false - position: left type: categories - position: left type: adsense client_id: pub-3835045281579720 slot_id: '26569024'sidebar: left: sticky: true 4. 위젯 설정값 저장하기설정값 세팅을 완료했는데, 매번 포스트를 생성할 때마다 설정값을 선언해야 한다고 생각하면 너무 번거롭다. 그래서 hexo는 이 세팅값을 저장해두고 사용할 수 있는 기능을 제공한다. /blog/scaffolds 폴더를 보면 레이아웃 형식에 따른 .md 파일이 있는 것을 볼 수 있다. 우리가 hexo new 명령어를 통해 포스트를 생성하면 그에 맞게 이 scaffolds 폴더 내 해당 .md 파일을 불러와 설정값을 가져오는 것이다. 나는 draft를 통해 포스트를 주로 생성하니, /blog/scaffolds/draft.md 파일에 설정값을 저장했다. 코드는 아래와 같다. /blog/scaffolds/draft.mdtitle: {{ title }}categories:tags:toc: truewidgets: - position: left type: profile author: boyoung-choi author_title: Web Publisher location: Korea, Seoul follow_link: 'https://github.com/im-boyoung-choi' social_links: Github: icon: fab fa-github url: 'https://github.com/im-boyoung-choi' Instagram: icon: fab fa-instagram url: 'https://www.instagram.com/by1uv/' RSS: icon: fas fa-rss url: / - position: left type: toc index: false - position: left type: categories - position: left type: adsense client_id: 'pub-3835045281579720' slot_id: '26569024' 제목은 hexo new [파일명]에서 가져오기 위해 {{ title }} 값을 넣었다. 보통 제목을 파일명과 다르게 바꾸지만, 한 번에 여러개의 포스트를 생성했을 때 구분하기 위한 수단으로 넣어뒀다. 포스트마다 수정될 categories, tags는 선언만 하고 값을 지정하지 않은 상태로 두고, 위젯은 항상 동일하니 값들을 넣어 저장해 뒀다. 레이아웃 종류에 따라 설정하는 것이 아니라 다른 저장값을 불러오고 싶다면 scaffolds 폴더 내에 [scaffold 파일명].md를 만들어 저장하고 아래 명령어로 포스트를 생성하면 된다. 이때 생성되는 포스트는 위에서 변경한 default_layout 값과 상관없이 post 형태로 생성된다. $ hexo new [scaffold 파일명] [파일명] 5. 자세히 보기 버튼 만들기hexo 포스팅을 하고 home 화면으로 들어가면 내가 작성 한 글이 밑으로 길게 떨어지는 것을 볼 수 있다. 짧은 글만 올리면 괜찮겠지만 나처럼 글이 길어질 경우 home 화면에서 여러개의 게시글을 확인 할 수가 없어 불편하다. 이런 경우 짧게 게시글의 서론만 home 화면에서 보여주고 ‘자세히 보기’ 버튼을 누르면 게시글 전체를 볼 수 있게 만들어 줄 수 있다. ‘자세히 보기’ 버튼은 &lt;!-- more --&gt;을 추가하면 되는데, 현제 게시글에 내가 삽입한 방법은 아래와 같다. /blog/source/(_drafts)/2108-post01.md(코드 생략)즉, 방법만 안다면 누구나 눈 감고도 할 수 있다. 먼저 포스트를 만드는 방법부터 알아보자.&lt;!-- more --&gt;### 1. hexo 포스팅포스팅을 위해서는 먼저 포스팅을 진행할 파일을 생성해야 한다. 아래 순서를 따라 포스트를 생성해보자.(코드 생략) 이로써 hexo 포스팅에 필요한 거의 모든 요소들을 훑어 보았다. 이제는 포스트를 생성해서 글을 작성하면 된다. 나는 markdown 문법에 대해서 잘 모르기 때문에 다음에는 글을 작성할 때 알고 있으면 좋은 markdown 문법에 대해 살펴볼 것이다. 오늘 작성한 글은 hexo 공식 문서를 토대로 작성되었다. hexo 포스팅에 대해 더 자세히 알고 싶은게 있다면 살펴보는 것을 추천한다.","link":"/2021/08/04/2108-post01/"},{"title":"01. hello, JavaScript!","text":"이제 패스트캠퍼스 ‘프론트엔드 개발 올인원 패키지 with React Online’ 강의 중 JavaScript 파트인 ‘벨로퍼트와 함께하는 모던 자바스크립트 : JavaScript 입문’을 수강하며 개발 공부를 시작해보려 한다. 굳이 강의를 수강하지 않아도 벨로퍼트님의 GitBook을 참고하면 JavaScript를 처음 공부하는 사람에게 분명 도움이 될 것이다. 나도 강의와 강의 문서를 천천히 따라가며 기록을 남길 것이다. 실습 예제나 주제에 따라 기록할 내용이 적어 글이 짧을 수도 있지만, 꾸준함을 목표로 나아가보자. 우선 JavaScript를 공부하면서 작성하는 글들은 ‘벨로퍼트와 함께하는 모던 자바스크립트’ 사이트를 참고하여 작성된 글이다. 나는 해당 GitBook 원문에서 내가 기억해야 하는 것, 몰랐던 것, 나 같은 초보가 따라 하기에 생략되어 있어서 내가 추가로 찾아본 것을 블로그에 기록할 예정이다. 나는 주로 업무에서도 사용 중인 크롬 환경에서 강의를 따라간다. 크롬에서 개발자 도구를 여는 방법은 Windows Ctrl + Shift + I, macOS Command + Option + I 단축키를 활용하면 된다. 크롬에서 개발자 도구를 열고 Console 탭에 아래 코드를 입력해보자. console.log('Hello JavaScript!'); console.log는 특정 내용을 출력하라는 것을 의미한다. 그렇다면, 아래 코드도 입력해보자. console.log('1 + 2 + 3 + 4');console.log(1 + 2 + 3 + 4); console.log를 통해 연산도 가능하다. 하지만 연산을 할 때에는 ''를 생략해야 한다. 그 이유는 다음 글에서 확인하자. 크롬의 Console 탭을 활용하기에는 코드 작성에 번거로움이 있어 GitHub에서 만든 Online Code Editor CodeSandbox에서 코드를 작성해볼 예정이다. CodeSandbox에 접속해 로그인 후 ‘Create Sandbox’를 눌러 Vanilla 템플릿을 열어준다. Vanilla 템플릿을 선택한 이유는 다른 라이브러리를 사용하지 않고 JavaScript만 사용하기 때문이다. 템플릿이 나타나면 오른쪽 상단에 ‘Fork’ 버튼을 누른다. 개발에서 Fork란 하나의 소프트웨어 소스 코드를 통째로 복사하여 독립적인 새로운 소프트웨어를 개발하는 것을 의미한다. 근데 여기서 ‘Fork’ 버튼을 눌러야 하는 이유는 사실 잘 모르겠다. (아시는 분 댓글 부탁드립니다.) 우리는 html 결과를 화면에서 확인하고자 하는 것이 아닌 Console 탭을 쉽게 활용하기 위해서 CodeSandbox를 사용하는 것이기 때문에, 오른쪽 하단에 있는 Console 탭을 상단 Browser, Tests 탭 옆으로 드래그하여 올려준다. 그다음 index.js 파일에 있는 내용을 다 지우고 아래 코드를 넣어보자. /src/index.jsconsole.log('안녕하세요!');console.log('JavaScript 를 배워봅시다'); 원래 코드를 입력하면 바로 Console 탭에 결과가 나와야 하는데, 결과가 바로 출력되지 않는 사람들은 아래 과정을 통해 설정을 변경해줘야 한다. 먼저 왼쪽 설정(톱니) 아이콘을 누르면 ‘Configuration Files’ 창이 열린다. ‘Other Configuration’에서 ‘sandbox.config.json’ ‘create’를 클릭, ‘Hard Reload on Change’ 설정을 활성화 해준다. 이후 전체 에디터 제일 오른쪽 상단 더보기(⋮) &gt;&gt; ‘Preferences’ &gt;&gt; ‘Preview’ 에서 ‘Clear Console’ 설정을 활성화 해준다. 모든 설정을 저장 후 다시 에디터로 돌아가 위 코드를 입력 후 저장하면 Console 탭에 바로 결과가 나오는 것을 확인할 수 있다. 참고 사이트 : 벨로퍼트와 함께하는 모던 자바스크립트 1장. 자바스크립트 입문 01. Hello JavaScript","link":"/2021/08/10/2108-post03/"},{"title":"02. 변수와 상수","text":"특정 이름에 특정 값을 담는 것을 우리는 선언이라고 한다. 선언은 두 가지 종류로 정의가 가능한데, 바로 변수와 상수이다. 개발에 관심이 있다면 ES6(ES2015) 이전에 사용하던 var 또는 ES6에서 추가된 let, const 셋 중 하나는 익숙하게 느껴질 것이다. 이 중에서 어떤 것을 변수를 선언할 때 사용하고, 어떤 것을 상수를 선언할 때 사용하는지 알아보자. 1. 변수변수란 바뀔 수 있는 값을 의미한다. 한 번 값을 선언한 뒤에도 새로운 값을 넣을 수 있다. CodeSandbox에 아래 코드를 입력해보자. /src/index.jslet value = 1;console.log(value); //1value = 2;console.log(value); //2 변수를 선언할 때는 let 키워드를 사용한다. 한 번 값을 선언한 뒤 다시 값을 선언해서 바꿀 수는 있지만, 같은 이름으로 2번을 선언할 수는 없으니 주의하자. 아래 코드를 입력해보면 Identifier 'value' has already been declared라는 오류가 나는 것을 볼 수 있다. 이미 선언된 식별자(value)를 중복 선언할 때 발생하는 오류이다. /src/index.jslet value = 1;let value = 2; //errorconsole.log(value) //Identifier 'value' has already been declared 변수를 선언하는 키워드로 let 말고도 var 키워드가 있는데, 이제는 점점 사용하지 않는 추세이다. var 키워드가 let 키워드와 가장 큰 차이점은 같은 이름으로 여러 번 선언할 수 있다는 것과 사용 범위 정도인데, var 키워드에 대한 정보는 아예 모르는 것이 낫다고 한다. 우리는 최대한 사용을 자제해야 하는 키워드 정도로만 우선 기억하고 넘어가자. 2. 상수상수는 고정적인 값을 의미한다. 한 번 선언하면 값이 바뀌지 않는다. 아래와 같이 상수를 선언해보자. /src/index.jsconst a = 10;console.log(a); //10 상수를 선언할 때는 const 키워드를 사용한다. 상수는 값을 바꿀 수 없기 때문에 아래 코드를 입력하면 &quot;b&quot; is read-only라는 오류가 난다. 읽기 전용이라는 의미인데, 한 번 선언하면 읽는 것만 되기 때문이다. /src/index.jsconst b = 20;b = 30; //errorconsole.log(b); //&quot;b&quot; is read-only 상수도 변수와 마찬가지로 같은 이름으로 2번을 선언하면 Identifier (상수명) has already been declared라는 오류가 발생하니 주의하자. /src/index.jsconst c = 30;const c = 60; //errorconsole.log(c) //Identifier 'c' has already been declared 3. 데이터 타입우리가 변수나 상수를 선언할 때 예제와 달리 숫자가 아닌 다른 값들을 선언할 수도 있다. 종류가 굉장히 많지만 기본적인 것들만 살펴보자. 3-1. 숫자(number)위 예제에서 해봤던 것과 같이 숫자를 선언하는 것이다. 숫자는 있는 그대로 값을 대입하면 된다. /src/index.jslet num = 1; 3-2. 문자열(string)텍스트(프로그래밍에서는 보통 문자열이라 칭한다.) 형태의 값은 작은따옴표 혹은 큰따옴표로 값을 감싸서 선언한다. 아래 코드로 따옴표의 사용 유무에 따른 결과 차이를 확인해보자. /src/index.jslet textSum = '1+1'let numSum = 1 + 1console.log(textSum) //1+1console.log(numSum) //2 작은따옴표와 큰따옴표 사용에 있어 차이는 없지만 하나로 통일해서 사용하는 것이 깔끔하다. 나는 작은따옴표를 주로 사용한다. 여기서 잠깐 CodeSandbox 환경설정을 다시 수정하고 가겠다. 작은따옴표를 입력하고 그대로 저장하고 싶은데, CodeSandbox를 사용하다 보면 저장할 때 작은따옴표가 큰따옴표로 자동 변환되는 것을 볼 수 있다. 이뿐만 아니라 나는 세미콜론(;)을 생략 가능한 코드에서는 생략하는 것을 선호하는데, 저장 시 자동으로 생성되기도 한다. 이를 막기 위해 아래와 같이 설정을 변경했다. 이전 게시글에서 했던 것과 동일하게 왼쪽 설정(톱니) 아이콘을 눌러 ‘Configuration Files’ &gt;&gt; ‘.prettierrc’ ‘Create’ 클릭, ‘Semicolons’은 비활성화하고 ‘Use Single Quotes’은 활성화하면 된다. 3-3. 참/거짓(boolean)참은 true, 거짓은 false로 값을 나타내는 것을 우리는 boolean이라고 한다. /src/index.jslet good = truelet bad = falseconsole.log(good) //trueconsole.log(bad) //false 3-4. 없음(null/undefined)JavaScript에서 ‘없음’을 의미하는 데이터 타입으로 약간의 의미 차이가 있다. null은 값이 없음을 의미, undefined는 값이 아직 정의되지 않았음을 의미한다. 아래 코드를 살펴보자. /src/index.jslet friend = nulllet criminalconsole.log(friend) //nullconsole.log(criminal) //undefined criminal 변수는 선언은 해줬지만 값을 지정해 주지 않았다. 이런 경우 console.log를 통해 확인하면 undefined라는 값이 출력된다. 참고 사이트 : 벨로퍼트와 함께하는 모던 자바스크립트 1장. 자바스크립트 입문 02. 변수","link":"/2021/08/17/2108-post04/"}],"tags":[{"name":"github","slug":"github","link":"/tags/github/"},{"name":"github blog","slug":"github-blog","link":"/tags/github-blog/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"config","slug":"config","link":"/tags/config/"},{"name":"navibar","slug":"navibar","link":"/tags/navibar/"},{"name":"footer","slug":"footer","link":"/tags/footer/"},{"name":"article","slug":"article","link":"/tags/article/"},{"name":"highlight","slug":"highlight","link":"/tags/highlight/"},{"name":"disqus","slug":"disqus","link":"/tags/disqus/"},{"name":"sharethis","slug":"sharethis","link":"/tags/sharethis/"},{"name":"widjet","slug":"widjet","link":"/tags/widjet/"},{"name":"Google AdSense","slug":"Google-AdSense","link":"/tags/Google-AdSense/"},{"name":"Google Analytics","slug":"Google-Analytics","link":"/tags/Google-Analytics/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"style","slug":"style","link":"/tags/style/"},{"name":"custom","slug":"custom","link":"/tags/custom/"},{"name":"post","slug":"post","link":"/tags/post/"},{"name":"draft","slug":"draft","link":"/tags/draft/"},{"name":"page","slug":"page","link":"/tags/page/"},{"name":"front matter","slug":"front-matter","link":"/tags/front-matter/"},{"name":"scaffolds","slug":"scaffolds","link":"/tags/scaffolds/"},{"name":"programming","slug":"programming","link":"/tags/programming/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"velopert","slug":"velopert","link":"/tags/velopert/"},{"name":"learnjs","slug":"learnjs","link":"/tags/learnjs/"},{"name":"var","slug":"var","link":"/tags/var/"},{"name":"let","slug":"let","link":"/tags/let/"},{"name":"const","slug":"const","link":"/tags/const/"}],"categories":[{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"hexo","slug":"blog/hexo","link":"/categories/blog/hexo/"},{"name":"markdown","slug":"blog/markdown","link":"/categories/blog/markdown/"},{"name":"programming","slug":"programming","link":"/categories/programming/"},{"name":"javascript","slug":"programming/javascript","link":"/categories/programming/javascript/"}]}