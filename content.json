{"pages":[],"posts":[{"title":"왕초보를 위한 GitHub Blog 만들기(with. hexo icarus)","text":"개발 공부를 시작하기 전에 기록을 정리하기 위해 블로그를 개설했다. 네이버, 티스토리, 벨로그, 브런치, 미디엄 등 요즘 개발자들에게 인기 있는 블로그 플랫폼들을 다 살펴봤지만 개발 공부하는데 좀 더 도움이 되는 건 없을까 찾던 중 GitHub 블로그를 선택하게 됐다. 구글에 ‘GitHub 블로그 만들기’를 검색하면 수많은 글이 나오지만, 진짜 나 같은 왕왕-왕초보를 위해 처음부터 끝까지 단 하나만 보고 뚝딱 만들어 낼 수 있게 작성된 포스트는 찾을 수 없었다. 에러 없이 개설하기까지 Git repository를 6번 삭제하고 다시 생성했다. 이 글은 node고 script고 개발의 기본 지식도 잘 모르는 나 같은 왕왕-왕초보를 위한 GitHub 블로그 개설 방법 안내이다. 1. GitHub 회원가입하기GitHub 블로그는 사용자의 username을 활용하여 URL이 생성된다. GirHub 공식문서에 따르면 블로그를 만들 때 사용되는 URL 형식을 [username].github.io로 정확히 일치하게 입력하지 않으면 작동하지 않을 수 있으므로 올바르게 설정해야 한다고 안내되어 있다. 나도 기존에 사용하던 GitHub 계정이 있었지만 이참에 대외적으로 사용할 수 있는 새 계정을 만들어야겠다 싶어 새로 계정을 만들었다. 계정을 만든 뒤에도 username을 변경할 수는 있지만 repository를 꽤 만들어서 활용하던 상태에서 username을 변경하면 기존에 공유했던 URL들이 다 무효화되기 때문에 개설할 때 신중하게 만드는 게 좋겠다. ** 나는 git이 이미 PC에 설치가 되어 있었는데, 혹시 설치되어 있지 않다면 다운로드받아야 한다. 2. repository 만들기 계정을 만들었으면 블로그 관리에 사용할 repository를 만든다. (초록색 ‘new’ 버튼 클릭) 위에서 언급했듯이 username을 정확히 일치시키지 않으면 작동하지 않을 수 있기 때문에 repository name을 적을 때 [username(=owner)].github.io로 제대로 입력했는지 꼭 확인한다. repository name 입력 후 ‘Cteate repository’를 눌러 생성을 완료한다. 3. 서버에 프로젝트 repository 내려받기git clone을 통해 방금 생성한 repository를 서버에 내려받아야 한다. 윈도우는 명령 프롬프터, MAC은 터미널을 열어 repository를 다운받을 서버(컴퓨터 폴더) 위치로 이동한다. 디렉토리 이동 명령어(cd) 사용법$ cd .. //해당 경로에서 상위 디렉토리로 이동$ cd [폴더명] //해당 경로에서 지정한 폴더로 이동$ [드라이브명]: //해당 드라이브로 이동 생성한 repository 화면 우측에 초록색 ‘code’ 버튼을 누르면 HTTPS 정보가 나온다. 이를 복사하여 clone repository를 진행한다. $ git clone https://github.com/im-boyoung-choi/im-boyoung-choi.github.io.git //본인 repository URLCloning into 'im-boyoung-choi.github.io'...warning: You appear to have cloned an empty repository. 여기서 나오는 warning은 무시하면 된다. 내려받은 repository로 터미널 디렉토리 경로를 다시 이동해준다. $ cd im-boyoung-choi.github.io.git 4. node 설치하기(with.hexo)GitHub 블로그를 검색해보면 Hexo와 Jekyll이라는 키워드를 많이 볼 수 있다. Hexo, Jekyll은 Static Site Generator(정적 웹사이트 생성기)인데, Jamstack에 들어가면 모든 Static Site Generator를 한눈에 볼 수 있다. 그중에서 사람들이 제일 많이 사용하는 것이 Jekyll, Hexo, Hugo(인기순)이다. 나는 한글 레퍼런스를 쉽게 찾을 수 있는지가 중요한 선택 기준 중 하나이기 때문에, 한국에서도 사용자가 많아 한글 레퍼런스를 비교적 쉽게 찾을 수 있는 Jekyll, Hexo로 선택지를 추렸다. 둘의 가장 큰 차이점은 Jekyll은 ruby 기반, Hexo는 javascript(node.js) 기반이라는 것인데, 나는 ruby에 대해서 잘 모르기도 하고 Jekyll은 빌드 속도가 느리다는 후기가 있어서 Hexo 블로그를 선택했다. 앞서 말했듯이, Hexo는 node.js 기반이기 때문에 node와 npm이 설치되어 있어야 한다. 아래 명령어로 node와 npm이 설치되어 있는지 확인해보자. $ node -vv14.15.4$ npm -v6.14.10 node 버전 확인이 안 된다면, node 공식 홈페이지에 가서 다운로드받으면 된다. npm은 ‘node package manager’이기 때문에 node를 설치하면 자동으로 같이 설치된다. 설치가 끝났다면 버전 확인 명령어를 통해 제대로 설치가 되었는지 확인한다. 5. hexo 설치하고 블로그 개설하기이제 hexo를 설치하면 된다. hexo 설치는 hexo 공식 문서를 확인하면 어렵지 않게 성공할 수 있다. hexo 문서에도 보면 hexo 설치를 시작하기 전에 git과 node를 설치하라는 안내가 있다. 우리는 이미 설치를 완료했기 때문에 바로 hexo 설치로 넘어간다. $ npm install -g hexo-cli 설치가 완료되면 타겟 폴더를 만들고 hexo를 초기화시켜줘야 한다. 방법은 아래와 같다. $ hexo init blog //hexo 버전 관리용 blog 폴더 생성$ cd blog //디렉토리 경로 변경$ npm install$ npm install hexo-server --save //hexo server 실행을 위한 플러그인$ npm install hexo-deployer-git --save //편리한 git 배포를 위한 플러그인 여기까지 마쳤으면 blog 폴더 내에 생성된 _config.yml 파일을 수정해보자. _config.yml 파일은 블로그의 기본 환경설정을 할 수 있는 정보들이 담겨있다. 5-1. 블로그 사이트 정보블로그 기본 정보들을 설정할 수 있다. # Sitetitle: nice to meet you :)subtitle: ''description: ''keywords:author: boyoung-choilanguage: kotimezone: '' 5-2. 블로그 URL 정보블로그 URL 정보를 설정할 수 있다. root 설정이 없는 경우 다음과 같이 추가해주면 된다. # URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'url: https://im-boyoung-choi.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks 5-3. GitHub 정보배포를 위해 본인의 GitHub 정보를 추가한다. 처음 생성한 본인의 GitHub 블로그 repository URL을 추가하면 된다. # Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: https://github.com/im-boyoung-choi/im-boyoung-choi.github.io.git branch: master 여기까지 마쳤으면 배포하기 전 로컬에 서버를 띄워 확인해보자. $ hexo generate //hexo 정적 리소스 생성, GitHub에 올라갈 리소스만 정리$ hexo server 변경 사항이 적용이 잘 안 된다면 다음 명령어를 사용한 뒤 위 과정을 한 번 더 시도해보자. $ hexo clean //캐시 파일(db.json) 및 생성된 파일(/public) 삭제 이후 로컬에서 확인이 완료되면 배포를 진행해준다. $ hexo deploy 본인의 GitHub 블로그 URL로 이동하면 배포가 된 것을 확인할 수 있다. 6. 테마 적용하기(with. icarus)이제는 테마를 적용하면 된다. 처음에 repository를 6번 삭제하고 다시 생성했다고 했는데, 바로 테마 적용이 문제였다. 적용이 안 되거나, 화면이 안 보이거나 각종 에러가 발생했는데 불행히 해결 방법을 찾지 못해 앞선 과정의 방법을 계속해서 바꿔 본 결과 현재 과정을 통해 테마 적용에 성공했다. hexo 테마는 종류가 많지만 나는 디테일한 부분은 어차피 커스텀 할 예정이라 큰 레이아웃 정도만 훑어보고 테마를 결정했다. 사람들이 많이 사용하는 테마는 icarus 외에 clean blog, next, tranquilpeak 정도가 있는 듯 하다. hexo v5부터는 npm 명령어로 테마 설치가 가능하다고 하는데(실제 icarus 공식 문서에서도 npm install로 설치하는 방법을 안내하고 있다.) 에러의 산을 넘지 못해 나는 scbmodule을 추가하는 방법으로 설치를 진행했다. $ git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus submodule add를 진행하면 themes 폴더 하위에 icarus 폴더가 생성된다. 5번 단계에서 수정했던 _config.yml 파일을 다시 열어 테마를 수정해주자. # Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus 이후 hexo server 명령어로 서버를 띄우면 에러가 발생한다. INFO Validating configINFO ======================================= ██╗ ██████╗ █████╗ ██████╗ ██╗ ██╗███████╗ ██║██╔════╝██╔══██╗██╔══██╗██║ ██║██╔════╝ ██║██║ ███████║██████╔╝██║ ██║███████╗ ██║██║ ██╔══██║██╔══██╗██║ ██║╚════██║ ██║╚██████╗██║ ██║██║ ██║╚██████╔╝███████║ ╚═╝ ╚═════╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚══════╝=============================================INFO === Checking package dependencies ===ERROR Package bulma-stylus is not installed.ERROR Package hexo-renderer-inferno is not installed.ERROR Package hexo-component-inferno is not installed.ERROR Package inferno is not installed.ERROR Package inferno-create-element is not installed.ERROR Please install the missing dependencies your Hexo site root directory:ERROR npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.12.0 inferno@^7.3.3 inferno-create-element@^7.3.3ERROR or:ERROR yarn add bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.12.0 inferno@^7.3.3 inferno-create-element@^7.3.3 에러 안내를 보면 추가 설치가 필요한 것들이 안내되는데 그대로 복사해서 터미널에 입력해주면 된다. $ npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.12.0 inferno@^7.3.3 inferno-create-element@^7.3.3 완료 후 다시 hexo server 명령어로 서버를 띄우면 적용된 테마를 확인할 수 있다. 7. 배포하기테마 적용 후에는 hexo clean 을 한 뒤 최종 배포를 진행한다. $ hexo clean$ hexo deploy --generate //generate와 deploy를 한 번에 배포 후 본인의 블로그 URL로 이동하면 반영된 것을 확인할 수 있다. hexo-deployer-git을 설치해서 hexo deploy를 통해 손쉽게 바로 배포할 수 있지만 다른 PC 환경에서도 설정을 변경해야 하는 상황이 생길 수도 있으므로 git push도 해주도록 하자. $ git add .$ git commit -m '커밋메세지'$ git push 그럼 이제 언제 어디서나 새로 clone 받아서 이어 나갈 수 있는 GitHub 블로그가 완성됐다.","link":"/2021/07/01/2107-post01/"},{"title":"GitHub Blog 환경설정, 1탄","text":"블로그 배포가 끝났으면 이제 내 마음대로, 내 스타일대로 블로그를 개조할 시간이다. 내가 GitHub 블로그를 선택한 이유 중 하나가 바로 원하는 부분을 비교적 쉽고 자유롭게 커스텀 할 수 있다는 점이 마음에 들었기 때문이다. 이 환경설정 시리즈에서는 우리가 생각하는 본격 커스텀을 시작하기 전에 기본 세팅 수정을 통해 틀을 잡는 방법에 대해 이야기해볼 것이다. icarus 릴리즈노트를 보면 2020년 4월쯤 버전이 3.0대로 올라가면서 레이아웃이 JSX와 Inferno.js로 변경됐음을 알 수 있다. 그래서인지 블로그를 검색해봐도 나와 맞는 설정 방법은 찾기 힘들었다. 그래도 여차저차 원하는 형태로 기본 세팅에 성공했으니 그 방법을 공유한다. GitBlog를 만들면서 우리는 _config.yml 파일을 수정했다. _config.yml 파일이 블로그 전체의 환경설정 파일이라면, _config.icarus.yml 파일은 테마의 환경설정 파일이다. 내가 수정한 부분을 토대로 _config.icarus.yml 파일을 같이 살펴보자. 1. 로고 이미지 변경하기블로그 첫 화면을 열면 상단 header 부분에 icarus 로고가 제일 눈에 띈다. 이 로고 이미지를 변경할 수 있는 부분이 아래 코드이다. _config.icarus.yml# Path or URL to the website's logologo: /img/logo.svg 이미지 저장 경로는 /icarus/source/img이다. 여기서 이미지를 변경해 줘도 되지만 나는 깔끔한 디자인을 위해 과감하게 로고 영역을 삭제했다. (사실 블로그를 위해 로고를 만드는 과정이 번거롭기도 하고, 오래도록 마음에 드는 로고를 만들 자신이 없었다.) 로고를 삭제하고 싶으면 navbar.jsx 파일에서 아래 코드를 삭제(또는 주석 처리) 해주면 된다. blog/themes/icarus/common/navbar.jsx&lt;div class=&quot;navbar-brand justify-content-center&quot;&gt; &lt;a class=&quot;navbar-item navbar-logo&quot; href={siteUrl}&gt; {navbarLogo} &lt;/a&gt;&lt;/div&gt; 2. favicon 이미지 변경하기로고를 삭제했으니 favicon 이미지도 변경해보자. 다른 블로그를 보면 로고도 만들고, 로고 이미지를 활용하여 favicon 이미지도 제작했다. 하지만 나는 로고 이미지를 삭제했기 때문에 로고와는 별개로 favicon을 정해야 했다. 후에 블로그 전체 테마 색상을 보라색으로 변경할 예정이라 이모지 사이트에서 보라색 하트 아이콘 .png를 다운받아 .ico로 변환한 뒤, 아래와 같이 코드를 수정했다. 마찬가지로 이미지 경로는 /icarus/source/img 이다. _config.icarus.yml# Page metadata configurationshead: # URL or path to the website's icon favicon: /img/purple-heart.ico 3. navibar menu 수정하기블로그 테마를 적용했을 때 기본적으로 생성되는 메뉴는 Home, Archives, Categories, Tags, About이다. Home을 제외한 나머지 메뉴들의 필요성을 느끼지 못했지만 좀 더 사용해보고 결정하기 위해 우선 유지를 하고 싶었다. 메뉴의 쓰임을 살펴보려고 하나씩 눌러보니 이상하게 About 페이지만 연결이 안 됐다. 검색을 해봤지만 해결 방법을 찾지 못해 About 메뉴만 삭제하는 것을 선택했다. 아래 코드에서 navibar menu를 추가 또는 삭제할 수 있다. _config.icarus.yml# Page top navigation bar configurationsnavbar: # Navigation menu items menu: Home: / Archives: /archives Categories: /categories Tags: /tags navibar menu 오른쪽 영역을 보면 GitHub 아이콘과 검색 아이콘이 있다. 아래 코드에서 GitHub 연결 링크를 수정할 수 있다. _config.icarus.yml# Links to be shown on the right of the navigation bar links: Download on GitHub: icon: fab fa-github url: 'https://github.com/im-boyoung-choi' 4. footer link 수정하기navibar에 있는 GitHub 링크를 수정했으면 footer에 있는 링크도 수정해보자. 아래 코드에서 footer 오른쪽 영역에 위치한 저작권 안내 및 GitHub 연결 링크를 변경할 수 있다. 나는 저작권 안내 링크는 그대로 두고 GitHub 링크만 변경했다. _config.icarus.yml# Page footer configurationsfooter: # Links to be shown on the right of the footer section links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution 4.0 International: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Download on GitHub: icon: fab fa-github url: 'https://github.com/im-boyoung-choi' 대략적인 navibar, footer 환경설정은 끝났다. article, widjet 환경설정을 이어 붙여 설명하려고 했는데 후반부가 너무 길어 환경설정을 1탄 / 2탄 / 3탄으로 구분했다. 2탄에서는 article, 3탄에서는 widjet 환경설정에 대해 살펴볼 예정이다.","link":"/2021/07/02/2107-post02/"},{"title":"GitHub Blog 환경설정, 2탄","text":"1탄에서는 navibar, footer 환경설정을 대략적으로 정리했다. 2탄에서는 article 환경설정에 대해 살펴볼 예정이다. 시작하기 전에 1탄을 건너띄고 2탄을 열었다면, 뒤로 가서 1탄을 보고 올 것을 추천한다. 물론 처음 블로그 만드는 방법을 포스팅했을 때 언급한 것처럼, 이 글도 왕왕-왕초보를 위한 또는 하나부터 열까지 내가 다 설정하고 확인하고 싶은 사람들을 위한 글이기 때문에 ‘나는 이미 좀 고수다’하는 사람들은 필요한 부분을 알아서 읽어도 된다. navibar, footer 환경설정은 블로그를 전반적으로 정리하는 느낌이었다면, article 환경설정은 내 글의 첫인상을 어떻게 보이도록 할지 고민하는 과정 같았다. 그럼 이제 article 환경설정을 시작해보자. 5. article 환경설정 수정하기이제 article, widget 환경설정을 수정할 차례이다. 5-1. highlight 테마 변경하기먼저, 코드 블록에서 사용되는 highlight 테마를 변경해보자. icarus에서 지원하는 hightlight 테마 데모는 여기서 확인할 수 있다. 나는 VS code에서도 사용 중인 atom-one-dark 테마를 적용했다. clipboard는 손쉬운 복사를 제공할 것인지, fold는 코드 블록 접기 기능을 제공할 것인지를 설정할 수 있다. _config.icarus.yml# Article related configurationsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-dark # Show copy code button clipboard: true # Default folding status of the code blocks. Can be &quot;&quot;, &quot;folded&quot;, &quot;unfolded&quot; fold: &quot;&quot; 우리가 이전에 _config.yml 파일을 수정할 때 미처 적용하지 못했던 변경사항이 있다. 아래 코드를 참고하여 _config.yml 파일도 수정하자. 아래 수정사항은 hexo 공식 문서에 안내되어 있는 설정값이다. 나는 highlight 테마를 변경한 뒤 다른 환경설정을 진행하고 있을 때, 로컬 서버에서 테마 적용에 자꾸 오류가 나는 모습을 확인했다. 검색해봐도 마땅한 해결방법을 찾지 못했는데, hexo clean hexo generate을 진행 후 다시 서버를 열어보니 적용이 됐다. 혹시 적용되지 않아서 머리가 아프다면 hexo generate을 진행해보자. _config.yml# Article related configurationshighlight: enable: true line_number: false auto_detect: true tab_replace: '' wrap: true hljs: falseprismjs: enable: false preprocess: true line_number: true tab_replace: '' 5-2. article 관련 상세 정보 노출 여부 변경하기게시글 상단에 보면 언제, 누가 올렸고 이 글을 읽기 위해 얼마의 시간이 소모될 예정이며, 몇 명이 읽었는지 등 다양한 정보들을 볼 수 있다. 나는 이 정보가 불필요하다고 생각되어 상당 부분을 숨김 처리했다. 아래는 그중에서 읽는데 소모되는 시간을 알려주는 readtime을 설정하는 코드이다. _config.icarus.yml# Whether to show estimated article reading time readtime: false 이 외에는 _config.icarus.yml 파일이 아닌 article.jsx 파일에서 삭제 또는 주석 처리를 통해 숨길 수 있다. blog/themes/icarus/common/article.jsx 파일 약 42 line Metadata 하위의 코드를 보면 Creation Date, Last Update Date, author, Categories, Read time, Visitor counter 관련 코드가 있는 것을 확인할 수 있다. 나는 환경설정에서 false 값으로 숨김 처리한 Read time을 제외하고 Last Update Date, author 영역의 코드를 추가로 주석 처리했다. 6. 검색, 답변, 기부, 공유 설정하기이제 큰 부분이 끝났다,라고 생각했는데 작은 것들이 오히려 손이 더 많이 간다. 아래 과정에서 이제 외부 연결이 필요한 항목들을 설정해보자. 6-1. 검색 기능 설정하기우선 검색이다. hexo icarus에서 지원하는 검색 플러그인은 Algolia, Baidu, Google CSE, Insight 4가지가 있다. Insight를 제외한 설정값은 검색 시 해당 플랫폼에서 검색 결과를 찾아오기 때문에 나는 블로그 검색답게 Insight 기본값을 그대로 사용했다. _config.icarus.yml# Search plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Search/search: type: insight 6-2. 댓글 기능 설정하기글 상세 페이지로 이동하면 알 수 없는 붉은색 상자들이 덕지덕지 붙어있을 것이다. 그중 하나가 댓글 기능이다. 블로그 하면 댓글 기능을 또 빼놓을 수 없다. 댓글 플러그인은 Changyan, Disqus, Facebook, Gitalk, Utterance, Valine 등 총 10가지나 있는데 나는 역시 기본값인 Disqus를 선택했다. 추후 Utterance으로 변경할 예정이나, 지금은 기본적으로 사용되는 것들의 설정 방법을 아는 것이 먼저라고 생각했다. _config.icarus.yml# Comment plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/comment: type: disqus # Disqus shortname shortname: 'im-boyoung-choi-blog' shortname의 값은 disqus 사이트에서 확인할 수 있다. 자세한 과정은 내가 참고했던 블로그를 따라 해보기를 추천한다. 6-3. 기부 기능 설정하기붉은색 알 수 없는 상자들 중에 하나는 기부 기능이다. 각종 방법을 통해 방문자들에게 기부(라고 표현하는 것이 맞는지는 모르겠지만)를 받을 수 있는데, 아직은 별로 필요 없는 기능이라 생각되어 전체 주석 처리 했다. 아래 코드에서 설정값을 변경하거나 나처럼 주석 처리로 기능을 없앨 수 있다. _config.icarus.yml# Donate plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donation/donates: # &quot;Afdian.net&quot; donate button configurations - type: afdian # URL to the &quot;Afdian.net&quot; personal page url: '' # Alipay donate button configurations - type: alipay # Alipay qrcode image URL qrcode: '' # &quot;Buy me a coffee&quot; donate button configurations - type: buymeacoffee # URL to the &quot;Buy me a coffee&quot; page url: '' # Patreon donate button configurations - type: patreon # URL to the Patreon page url: '' # Paypal donate button configurations - type: paypal # Paypal business ID or email address business: '' # Currency code currency_code: USD # Wechat donate button configurations - type: wechat # Wechat qrcode image URL qrcode: '' 6-4. 공유 기능 설정하기붉은색 상자 중 또 하나는 공유 기능이다. 공유 플러그인은 AddThis, AddToAny, Baidu Share, Share.js, ShareThis가 있는데 나는 많이들 사용하는 ShareThis를 선택했다. _config.icarus.yml# Share plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/share: type: sharethis # URL to the ShareThis share plugin script install_url: 'https://platform-api.sharethis.com/js/sharethis.js#property=60dc2a2ac3a073001ac7a28a&amp;product=inline-share-buttons' install_url 값은 sharethis 사이트에서 확인할 수 있다. 접속 후 메인에 있는 ‘Start with Share Buttons’를 누른다. 나는 가장 많이 사용하는 가로 노출 버튼을 선택했다. 세부 버튼 스타일을 내가 원하는 대로 선택한 뒤 ‘next’ 버튼을 누른다. 로그인 화면이 나오면 회원가입 또는 로그인을 진행해 준다. 로그인을 하면 코드가 나오는데, 우리는 이미 플러그인이 설치되어 있기 때문에 코드 전체를 복사하는 것이 아닌 src만 복사한다. 방금 복사한 src가 우리의 install_url이 된다. article 환경설정은 이렇게 마무리했다. 다음 widjet 환경설정에서는 widjet뿐만 아니라 Google AdSense, Google Analytics 연동 방법도 함께 다룰 예정이다.","link":"/2021/07/05/2107-post03/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"config","slug":"config","link":"/tags/config/"},{"name":"navibar","slug":"navibar","link":"/tags/navibar/"},{"name":"footer","slug":"footer","link":"/tags/footer/"},{"name":"article","slug":"article","link":"/tags/article/"},{"name":"highlight","slug":"highlight","link":"/tags/highlight/"},{"name":"disqus","slug":"disqus","link":"/tags/disqus/"},{"name":"sharethis","slug":"sharethis","link":"/tags/sharethis/"}],"categories":[{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"hexo","slug":"blog/hexo","link":"/categories/blog/hexo/"}]}